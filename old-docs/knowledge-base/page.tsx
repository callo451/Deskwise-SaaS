'use client';

import React, { useState, useEffect, useMemo } from 'react';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/tabs';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuLabel,
  DropdownMenuSeparator,
} from '@/components/ui/dropdown-menu';
import {
  BookOpen,
  Search,
  Filter,
  Grid3X3,
  List,
  User,
  Calendar,
  Eye,
  Clock,
  Bot,
  TrendingUp,
  Star,
  ThumbsUp,
  MessageSquare,
  Share2,
  MoreHorizontal,
  PlusCircle,
  Tag,
  Shield,
  Monitor,
  Wifi,
  Settings,
  HelpCircle,
  Lock,
  Cloud,
  Smartphone,
  Mail,
  Database,
  Globe,
  Zap,
  AlertTriangle,
  CheckCircle2,
  Users,
  Laptop
} from 'lucide-react';
import Link from 'next/link';
import { motion, AnimatePresence } from 'framer-motion';
import { useToast } from '@/hooks/use-toast';

// Types
interface KnowledgeBaseCategory {
  id: string;
  name: string;
  description: string;
  icon: React.ComponentType<{ className?: string }>;
  color: string;
  articleCount: number;
  articles: KnowledgeBaseArticle[];
}

interface KnowledgeBaseArticle {
  id: string;
  title: string;
  description: string;
  content: string;
  category: string;
  tags: string[];
  author: string;
  createdAt: Date;
  updatedAt: Date;
  views: number;
  likes: number;
  visibility: 'Public' | 'Internal';
  featured: boolean;
  difficulty: 'Beginner' | 'Intermediate' | 'Advanced';
  estimatedReadTime: number;
  isAutoGenerated?: boolean;
}

export default function KnowledgeBasePage() {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [selectedDifficulty, setSelectedDifficulty] = useState<string>('all');
  const [selectedVisibility, setSelectedVisibility] = useState<string>('all');
  const [sortBy, setSortBy] = useState<string>('popular');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const { toast } = useToast();

  // Mock Categories with Rich Data
  const categories: KnowledgeBaseCategory[] = [
    {
      id: 'getting-started',
      name: 'Getting Started',
      description: 'Essential guides for new users and onboarding',
      icon: BookOpen,
      color: 'from-blue-500 to-cyan-500',
      articleCount: 12,
      articles: []
    },
    {
      id: 'security',
      name: 'Security & Access',
      description: 'Password management, VPN setup, and security protocols',
      icon: Shield,
      color: 'from-red-500 to-pink-500',
      articleCount: 18,
      articles: []
    },
    {
      id: 'software',
      name: 'Software & Applications',
      description: 'Installation guides, troubleshooting, and usage tips',
      icon: Settings,
      color: 'from-purple-500 to-indigo-500',
      articleCount: 24,
      articles: []
    },
    {
      id: 'hardware',
      name: 'Hardware & Equipment',
      description: 'Device setup, maintenance, and troubleshooting',
      icon: Monitor,
      color: 'from-green-500 to-emerald-500',
      articleCount: 15,
      articles: []
    },
    {
      id: 'network',
      name: 'Network & Connectivity',
      description: 'WiFi, VPN, and network troubleshooting guides',
      icon: Wifi,
      color: 'from-orange-500 to-yellow-500',
      articleCount: 14,
      articles: []
    },
    {
      id: 'cloud',
      name: 'Cloud Services',
      description: 'Cloud storage, backup, and collaboration tools',
      icon: Cloud,
      color: 'from-indigo-500 to-blue-500',
      articleCount: 16,
      articles: []
    },
    {
      id: 'troubleshooting',
      name: 'Troubleshooting',
      description: 'Common issues and step-by-step solutions',
      icon: HelpCircle,
      color: 'from-gray-500 to-slate-500',
      articleCount: 22,
      articles: []
    },
    {
      id: 'policies',
      name: 'IT Policies',
      description: 'Company policies, procedures, and compliance guidelines',
      icon: Users,
      color: 'from-teal-500 to-green-500',
      articleCount: 9,
      articles: []
    }
  ];

  // Mock Articles with Comprehensive Data
  const allArticles: KnowledgeBaseArticle[] = [
    {
      id: 'pwd-reset-guide',
      title: 'How to Reset Your Password',
      description: 'Step-by-step guide to reset your password across different systems',
      content: 'Detailed password reset instructions...',
      category: 'security',
      tags: ['password', 'security', 'authentication', 'account'],
      author: 'Sarah Johnson',
      createdAt: new Date(2024, 0, 15),
      updatedAt: new Date(2024, 0, 20),
      views: 2847,
      likes: 156,
      visibility: 'Public',
      featured: true,
      difficulty: 'Beginner',
      estimatedReadTime: 3
    },
    {
      id: 'vpn-setup-guide',
      title: 'VPN Setup for Remote Work',
      description: 'Complete guide to setting up VPN access for secure remote connections',
      content: 'Comprehensive VPN setup instructions...',
      category: 'security',
      tags: ['vpn', 'remote work', 'security', 'network'],
      author: 'Mike Chen',
      createdAt: new Date(2024, 0, 10),
      updatedAt: new Date(2024, 0, 25),
      views: 1923,
      likes: 89,
      visibility: 'Internal',
      featured: true,
      difficulty: 'Intermediate',
      estimatedReadTime: 8
    },
    {
      id: 'office365-setup',
      title: 'Office 365 Complete Setup Guide',
      description: 'Configure Office 365 applications for maximum productivity',
      content: 'Detailed Office 365 configuration steps...',
      category: 'software',
      tags: ['office365', 'email', 'productivity', 'setup'],
      author: 'Jennifer Davis',
      createdAt: new Date(2024, 0, 5),
      updatedAt: new Date(2024, 0, 22),
      views: 3156,
      likes: 234,
      visibility: 'Public',
      featured: true,
      difficulty: 'Beginner',
      estimatedReadTime: 12
    },
    {
      id: 'laptop-setup-new-employee',
      title: 'New Employee Laptop Setup Checklist',
      description: 'Essential setup steps for new employee workstations',
      content: 'Complete laptop configuration checklist...',
      category: 'hardware',
      tags: ['laptop', 'onboarding', 'setup', 'checklist'],
      author: 'David Wilson',
      createdAt: new Date(2023, 11, 20),
      updatedAt: new Date(2024, 0, 18),
      views: 1567,
      likes: 78,
      visibility: 'Internal',
      featured: false,
      difficulty: 'Intermediate',
      estimatedReadTime: 15
    },
    {
      id: 'wifi-troubleshooting',
      title: 'WiFi Connection Troubleshooting',
      description: 'Common WiFi issues and how to resolve them quickly',
      content: 'WiFi troubleshooting steps and solutions...',
      category: 'network',
      tags: ['wifi', 'troubleshooting', 'connectivity', 'network'],
      author: 'Alex Thompson',
      createdAt: new Date(2024, 0, 8),
      updatedAt: new Date(2024, 0, 23),
      views: 2234,
      likes: 134,
      visibility: 'Public',
      featured: false,
      difficulty: 'Beginner',
      estimatedReadTime: 6
    },
    {
      id: 'cloud-storage-best-practices',
      title: 'Cloud Storage Security Best Practices',
      description: 'Keep your data safe with proper cloud storage practices',
      content: 'Best practices for secure cloud storage...',
      category: 'cloud',
      tags: ['cloud storage', 'security', 'backup', 'best practices'],
      author: 'Lisa Rodriguez',
      createdAt: new Date(2024, 0, 12),
      updatedAt: new Date(2024, 0, 19),
      views: 1789,
      likes: 92,
      visibility: 'Internal',
      featured: false,
      difficulty: 'Advanced',
      estimatedReadTime: 10
    },
    {
      id: 'printer-setup-guide',
      title: 'Network Printer Installation Guide',
      description: 'Install and configure network printers on Windows and macOS',
      content: 'Step-by-step printer installation...',
      category: 'hardware',
      tags: ['printer', 'installation', 'network', 'setup'],
      author: 'Robert Kim',
      createdAt: new Date(2024, 0, 3),
      updatedAt: new Date(2024, 0, 16),
      views: 945,
      likes: 45,
      visibility: 'Public',
      featured: false,
      difficulty: 'Intermediate',
      estimatedReadTime: 7
    },
    {
      id: 'email-security-tips',
      title: 'Email Security and Phishing Prevention',
      description: 'Protect yourself from email threats and phishing attacks',
      content: 'Email security guidelines and tips...',
      category: 'security',
      tags: ['email', 'phishing', 'security', 'awareness'],
      author: 'Emma Watson',
      createdAt: new Date(2024, 0, 14),
      updatedAt: new Date(2024, 0, 21),
      views: 2678,
      likes: 187,
      visibility: 'Public',
      featured: true,
      difficulty: 'Beginner',
      estimatedReadTime: 5
    },
    {
      id: 'software-licensing-policy',
      title: 'Software Licensing Compliance Policy',
      description: 'Understanding software licensing requirements and compliance',
      content: 'Software licensing policy details...',
      category: 'policies',
      tags: ['licensing', 'compliance', 'policy', 'legal'],
      author: 'John Miller',
      createdAt: new Date(2023, 11, 28),
      updatedAt: new Date(2024, 0, 11),
      views: 678,
      likes: 34,
      visibility: 'Internal',
      featured: false,
      difficulty: 'Advanced',
      estimatedReadTime: 20
    },
    {
      id: 'backup-restore-guide',
      title: 'Data Backup and Recovery Procedures',
      description: 'Learn how to backup and restore your important data',
      content: 'Comprehensive backup and restore guide...',
      category: 'cloud',
      tags: ['backup', 'recovery', 'data protection', 'procedures'],
      author: 'Maria Garcia',
      createdAt: new Date(2024, 0, 6),
      updatedAt: new Date(2024, 0, 17),
      views: 1432,
      likes: 71,
      visibility: 'Internal',
      featured: false,
      difficulty: 'Intermediate',
      estimatedReadTime: 14
    },
    {
      id: 'mobile-device-security',
      title: 'Mobile Device Security Guidelines',
      description: 'Secure your smartphone and tablet for business use',
      content: 'Mobile security best practices...',
      category: 'security',
      tags: ['mobile', 'security', 'smartphone', 'tablet'],
      author: 'Kevin Lee',
      createdAt: new Date(2024, 0, 9),
      updatedAt: new Date(2024, 0, 24),
      views: 1245,
      likes: 63,
      visibility: 'Public',
      featured: false,
      difficulty: 'Beginner',
      estimatedReadTime: 8
    },
    {
      id: 'ai-generated-printer-fix',
      title: 'Fixing Common Printer Paper Jams',
      description: 'AI-generated guide for resolving printer paper jam issues',
      content: 'Auto-generated printer troubleshooting...',
      category: 'troubleshooting',
      tags: ['printer', 'paper jam', 'troubleshooting', 'maintenance'],
      author: 'AI Assistant',
      createdAt: new Date(2024, 0, 26),
      updatedAt: new Date(2024, 0, 26),
      views: 432,
      likes: 28,
      visibility: 'Public',
      featured: false,
      difficulty: 'Beginner',
      estimatedReadTime: 4,
      isAutoGenerated: true
    }
  ];

  // Update categories with article counts
  categories.forEach(category => {
    category.articles = allArticles.filter(article => article.category === category.id);
    category.articleCount = category.articles.length;
  });

  // Featured articles
  const featuredArticles = allArticles.filter(article => article.featured);

  // Filter and sort articles
  const filteredArticles = useMemo(() => {
    let filtered = allArticles.filter(article => {
      const matchesSearch = article.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
                           article.description.toLowerCase().includes(searchQuery.toLowerCase()) ||
                           article.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()));
      
      const matchesCategory = selectedCategory === 'all' || article.category === selectedCategory;
      const matchesDifficulty = selectedDifficulty === 'all' || article.difficulty === selectedDifficulty;
      const matchesVisibility = selectedVisibility === 'all' || article.visibility === selectedVisibility;
      
      return matchesSearch && matchesCategory && matchesDifficulty && matchesVisibility;
    });

    // Sort articles
    switch (sortBy) {
      case 'popular':
        filtered.sort((a, b) => b.views - a.views);
        break;
      case 'recent':
        filtered.sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime());
        break;
      case 'likes':
        filtered.sort((a, b) => b.likes - a.likes);
        break;
      case 'alphabetical':
        filtered.sort((a, b) => a.title.localeCompare(b.title));
        break;
      default:
        break;
    }

    return filtered;
  }, [allArticles, searchQuery, selectedCategory, selectedDifficulty, selectedVisibility, sortBy]);

  const totalViews = allArticles.reduce((sum, article) => sum + article.views, 0);
  const totalLikes = allArticles.reduce((sum, article) => sum + article.likes, 0);

  const getDifficultyColor = (difficulty: string) => {
    switch (difficulty) {
      case 'Beginner':
        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';
      case 'Intermediate':
        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';
      case 'Advanced':
        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';
      default:
        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';
    }
  };

  const handleLikeArticle = (articleId: string) => {
    toast({
      title: "Article Liked",
      description: "Thanks for the feedback!",
    });
  };

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Knowledge Base</h1>
          <p className="text-muted-foreground">
            Find answers, guides, and documentation to help you succeed
          </p>
        </div>
        <Link href="/knowledge-base/new">
          <Button>
            <PlusCircle className="mr-2 h-4 w-4" />
            Create Article
          </Button>
        </Link>
      </div>

      {/* Stats Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Total Articles</p>
                <p className="text-2xl font-bold">{allArticles.length}</p>
              </div>
              <BookOpen className="h-8 w-8 text-primary" />
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Total Views</p>
                <p className="text-2xl font-bold">{totalViews.toLocaleString()}</p>
              </div>
              <Eye className="h-8 w-8 text-blue-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Total Likes</p>
                <p className="text-2xl font-bold">{totalLikes.toLocaleString()}</p>
              </div>
              <ThumbsUp className="h-8 w-8 text-green-500" />
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-muted-foreground">Categories</p>
                <p className="text-2xl font-bold">{categories.length}</p>
              </div>
              <Tag className="h-8 w-8 text-purple-500" />
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Featured Articles */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Star className="h-5 w-5 text-yellow-500" />
            Featured Articles
          </CardTitle>
          <CardDescription>
            Our most popular and helpful content
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {featuredArticles.map(article => (
              <motion.div
                key={article.id}
                whileHover={{ scale: 1.02 }}
                className="p-4 border rounded-lg hover:shadow-md transition-all cursor-pointer"
              >
                <div className="flex items-start justify-between mb-2">
                  <h3 className="font-semibold text-sm">{article.title}</h3>
                  <Badge className={getDifficultyColor(article.difficulty)}>
                    {article.difficulty}
                  </Badge>
                </div>
                <p className="text-xs text-muted-foreground mb-3 line-clamp-2">
                  {article.description}
                </p>
                <div className="flex items-center justify-between text-xs text-muted-foreground">
                  <div className="flex items-center gap-3">
                    <div className="flex items-center gap-1">
                      <Eye className="h-3 w-3" />
                      {article.views.toLocaleString()}
                    </div>
                    <div className="flex items-center gap-1">
                      <ThumbsUp className="h-3 w-3" />
                      {article.likes}
                    </div>
                    <div className="flex items-center gap-1">
                      <Clock className="h-3 w-3" />
                      {article.estimatedReadTime}m
                    </div>
                  </div>
                  {article.isAutoGenerated && (
                    <Badge variant="outline" className="text-xs">
                      <Bot className="h-3 w-3 mr-1" />
                      AI Generated
                    </Badge>
                  )}
                </div>
              </motion.div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* Categories Grid */}
      <div>
        <h2 className="text-2xl font-bold mb-6">Browse by Category</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {categories.map(category => (
            <motion.div
              key={category.id}
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
            >
              <Card 
                className="cursor-pointer hover:shadow-lg transition-all"
                onClick={() => setSelectedCategory(category.id)}
              >
                <CardContent className="p-6">
                  <div className="flex items-center space-x-4">
                    <div className={`p-3 rounded-lg bg-gradient-to-r ${category.color}`}>
                      <category.icon className="h-6 w-6 text-white" />
                    </div>
                    <div>
                      <h3 className="font-semibold text-gray-900 dark:text-white">
                        {category.name}
                      </h3>
                      <p className="text-sm text-muted-foreground">
                        {category.articleCount} articles
                      </p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </div>
      </div>

      {/* Search and Filters */}
      <Card>
        <CardHeader>
          <CardTitle>Search & Filter Articles</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex-1">
              <div className="relative">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                <Input
                  placeholder="Search articles, tags, or content..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10"
                />
              </div>
            </div>
            <div className="flex gap-2">
              <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                <SelectTrigger className="w-40">
                  <SelectValue placeholder="Category" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Categories</SelectItem>
                  {categories.map(cat => (
                    <SelectItem key={cat.id} value={cat.id}>{cat.name}</SelectItem>
                  ))}
                </SelectContent>
              </Select>

              <Select value={selectedDifficulty} onValueChange={setSelectedDifficulty}>
                <SelectTrigger className="w-32">
                  <SelectValue placeholder="Level" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Levels</SelectItem>
                  <SelectItem value="Beginner">Beginner</SelectItem>
                  <SelectItem value="Intermediate">Intermediate</SelectItem>
                  <SelectItem value="Advanced">Advanced</SelectItem>
                </SelectContent>
              </Select>

              <Select value={sortBy} onValueChange={setSortBy}>
                <SelectTrigger className="w-32">
                  <SelectValue placeholder="Sort by" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="popular">Most Popular</SelectItem>
                  <SelectItem value="recent">Most Recent</SelectItem>
                  <SelectItem value="likes">Most Liked</SelectItem>
                  <SelectItem value="alphabetical">A-Z</SelectItem>
                </SelectContent>
              </Select>

              <div className="flex border rounded-md">
                <Button
                  variant={viewMode === 'grid' ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => setViewMode('grid')}
                >
                  <Grid3X3 className="h-4 w-4" />
                </Button>
                <Button
                  variant={viewMode === 'list' ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => setViewMode('list')}
                >
                  <List className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>

          <div className="flex items-center justify-between text-sm text-muted-foreground">
            <span>
              Showing {filteredArticles.length} of {allArticles.length} articles
            </span>
            {(searchQuery || selectedCategory !== 'all' || selectedDifficulty !== 'all') && (
              <Button
                variant="ghost"
                size="sm"
                onClick={() => {
                  setSearchQuery('');
                  setSelectedCategory('all');
                  setSelectedDifficulty('all');
                  setSelectedVisibility('all');
                }}
              >
                Clear filters
              </Button>
            )}
          </div>
        </CardContent>
      </Card>

      {/* Articles Display */}
      <Card>
        <CardContent className="p-6">
          {viewMode === 'grid' ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredArticles.map(article => (
                <motion.div
                  key={article.id}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="border rounded-lg p-4 hover:shadow-lg transition-all cursor-pointer"
                >
                  <div className="flex items-start justify-between mb-3">
                    <h3 className="font-semibold line-clamp-2">{article.title}</h3>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="sm">
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent>
                        <DropdownMenuItem>
                          <Share2 className="h-4 w-4 mr-2" />
                          Share
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => handleLikeArticle(article.id)}>
                          <ThumbsUp className="h-4 w-4 mr-2" />
                          Like
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                  
                  <p className="text-sm text-muted-foreground mb-4 line-clamp-3">
                    {article.description}
                  </p>

                  <div className="flex flex-wrap gap-2 mb-4">
                    {article.tags.slice(0, 3).map(tag => (
                      <Badge key={tag} variant="outline" className="text-xs">
                        {tag}
                      </Badge>
                    ))}
                    {article.tags.length > 3 && (
                      <Badge variant="outline" className="text-xs">
                        +{article.tags.length - 3}
                      </Badge>
                    )}
                  </div>

                  <div className="flex items-center justify-between text-xs text-muted-foreground">
                    <div className="flex items-center gap-1">
                      <User className="h-3 w-3" />
                      {article.author}
                    </div>
                    <div className="flex items-center gap-3">
                      <div className="flex items-center gap-1">
                        <Eye className="h-3 w-3" />
                        {article.views.toLocaleString()}
                      </div>
                      <div className="flex items-center gap-1">
                        <Clock className="h-3 w-3" />
                        {article.estimatedReadTime}m
                      </div>
                    </div>
                  </div>

                  <div className="flex items-center justify-between mt-4">
                    <Badge className={getDifficultyColor(article.difficulty)}>
                      {article.difficulty}
                    </Badge>
                    {article.isAutoGenerated && (
                      <Badge variant="outline" className="text-xs">
                        <Bot className="h-3 w-3 mr-1" />
                        AI Generated
                      </Badge>
                    )}
                  </div>
                </motion.div>
              ))}
            </div>
          ) : (
            <div className="space-y-4">
              {filteredArticles.map(article => (
                <motion.div
                  key={article.id}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  className="border rounded-lg p-4 hover:shadow-md transition-all cursor-pointer"
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <h3 className="font-semibold">{article.title}</h3>
                        <Badge className={getDifficultyColor(article.difficulty)}>
                          {article.difficulty}
                        </Badge>
                        {article.isAutoGenerated && (
                          <Badge variant="outline" className="text-xs">
                            <Bot className="h-3 w-3 mr-1" />
                            AI Generated
                          </Badge>
                        )}
                      </div>
                      <p className="text-sm text-muted-foreground mb-3">
                        {article.description}
                      </p>
                      <div className="flex items-center gap-4 text-xs text-muted-foreground">
                        <div className="flex items-center gap-1">
                          <User className="h-3 w-3" />
                          {article.author}
                        </div>
                        <div className="flex items-center gap-1">
                          <Calendar className="h-3 w-3" />
                          {article.updatedAt.toLocaleDateString()}
                        </div>
                        <div className="flex items-center gap-1">
                          <Eye className="h-3 w-3" />
                          {article.views.toLocaleString()}
                        </div>
                        <div className="flex items-center gap-1">
                          <Clock className="h-3 w-3" />
                          {article.estimatedReadTime}m read
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => handleLikeArticle(article.id)}
                      >
                        <ThumbsUp className="h-4 w-4 mr-1" />
                        {article.likes}
                      </Button>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="sm">
                            <MoreHorizontal className="h-4 w-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent>
                          <DropdownMenuItem>
                            <Share2 className="h-4 w-4 mr-2" />
                            Share
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </div>
                  </div>
                </motion.div>
              ))}
            </div>
          )}

          {filteredArticles.length === 0 && (
            <div className="text-center py-12">
              <BookOpen className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
              <h3 className="text-lg font-semibold mb-2">No articles found</h3>
              <p className="text-muted-foreground mb-4">
                Try adjusting your search criteria or browse by category
              </p>
              <Button onClick={() => {
                setSearchQuery('');
                setSelectedCategory('all');
                setSelectedDifficulty('all');
              }}>
                Clear filters
              </Button>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}