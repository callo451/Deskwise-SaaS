'use client';

import React, { useState, useEffect } from 'react';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { useParams, useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { ArrowLeft, Edit, BookOpen, User, Calendar, Eye, Clock, List, Bot } from 'lucide-react';
import BlockViewer from '@/components/blocks/BlockViewer';
import { convertContentToBlocks } from '@/lib/blocks/content-converter';
import Link from 'next/link';
import type { KnowledgeBaseArticle } from '@/lib/types';
import { format } from 'date-fns';

export default function ArticleViewPage() {
  const params = useParams<{ id: string }>();
  const router = useRouter();
  const [article, setArticle] = useState<KnowledgeBaseArticle | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchArticle();
  }, [params.id]);

  const fetchArticle = async () => {
    try {
      setLoading(true);
      const response = await fetch(`/api/knowledge-base/${params.id}`);
      if (response.ok) {
        const data = await response.json();
        setArticle(data);
      } else if (response.status === 404) {
        setArticle(null);
      } else {
        console.error('Failed to fetch article');
      }
    } catch (error) {
      console.error('Error fetching article:', error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <Card>
        <CardContent className="p-8">
          <div className="flex items-center justify-center space-x-2">
            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-primary"></div>
            <span>Loading article...</span>
          </div>
        </CardContent>
      </Card>
    );
  }

  if (!article) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Article Not Found</CardTitle>
          <CardDescription>This article could not be found.</CardDescription>
        </CardHeader>
        <CardContent>
            <Button onClick={() => router.back()}>
                <ArrowLeft className="mr-2 h-4 w-4" /> Go Back
            </Button>
        </CardContent>
      </Card>
    );
  }

  // Check if this is an auto-generated article
  const isAutoGenerated = article.tags?.includes('auto-generated') || article.metadata?.source === 'chrome-extension';
  const stepCount = article.metadata?.stepCount || 0;
  
  // Parse content - handle both traditional content and JSON blocks
  let blocks = [];
  let wordCount = 0;
  
  try {
    // Check if content is JSON blocks format
    const parsedContent = JSON.parse(article.content);
    if (parsedContent.blocks && Array.isArray(parsedContent.blocks)) {
      blocks = parsedContent.blocks;
      // Calculate word count from blocks
      wordCount = blocks.reduce((count, block) => {
        const text = block.textContent || '';
        return count + text.split(/\s+/).filter(Boolean).length;
      }, 0);
    } else {
      throw new Error('Not JSON blocks format');
    }
  } catch {
    // Fallback: treat as traditional markdown/HTML content
    blocks = convertContentToBlocks(article.content);
    wordCount = article.content.split(/\s+/).length;
  }
  
  const estimatedMinutes = Math.ceil(wordCount / 200);

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center">
        <div className="flex items-center gap-4">
          <Button variant="outline" size="sm" onClick={() => router.back()}>
            <ArrowLeft className="mr-2 h-4 w-4" />
            Back to Knowledge Base
          </Button>
          <h1 className="text-2xl font-semibold leading-tight tracking-tight">
            {article.title}
          </h1>
        </div>
        <Button asChild size="sm">
            <Link href={`/kb/${article.id}`}><Edit className="mr-2 h-4 w-4" />Edit Article</Link>
        </Button>
      </div>

      {/* Auto-generated article metadata banner */}
      {isAutoGenerated && (
        <div className="relative overflow-hidden rounded-lg border bg-background/60 backdrop-blur-sm shadow-sm">
          <div className="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-secondary/5"></div>
          <div className="relative p-4">
            <div className="flex items-center gap-3 mb-3">
              <div className="p-2 rounded-full bg-white/60 dark:bg-black/30 shadow-sm">
                <Bot className="h-4 w-4 text-primary" />
              </div>
              <span className="font-medium text-foreground">Auto-Generated Guide</span>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="bg-white/40 dark:bg-black/40 rounded-lg p-3 shadow-sm">
                <div className="flex items-center gap-2 text-sm">
                  <List className="h-4 w-4 text-muted-foreground" />
                  <span className="text-foreground">
                    <span className="font-semibold">{stepCount}</span> steps
                  </span>
                </div>
              </div>
              <div className="bg-white/40 dark:bg-black/40 rounded-lg p-3 shadow-sm">
                <div className="flex items-center gap-2 text-sm">
                  <Clock className="h-4 w-4 text-muted-foreground" />
                  <span className="text-foreground">
                    <span className="font-semibold">{estimatedMinutes}</span> min read
                  </span>
                </div>
              </div>
              <div className="bg-white/40 dark:bg-black/40 rounded-lg p-3 shadow-sm">
                <div className="flex items-center gap-2 text-sm">
                  <Calendar className="h-4 w-4 text-muted-foreground" />
                  <span className="text-foreground">
                    {format(new Date(article.lastUpdated), 'MMM d, yyyy')}
                  </span>
                </div>
              </div>
              <div className="bg-white/40 dark:bg-black/40 rounded-lg p-3 shadow-sm">
                <div className="flex items-center gap-2 text-sm">
                  <User className="h-4 w-4 text-muted-foreground" />
                  <span className="text-foreground">
                    {article.author}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      
      <Card className="overflow-hidden">
        {/* Streamlined header for auto-generated articles */}
        {isAutoGenerated ? (
          <CardHeader className="pb-4">
            <div className="flex items-center gap-2 mb-2">
              <Badge variant="secondary" className="bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                {article.type}
              </Badge>
              <Badge variant="outline" className="text-xs">
                {article.category}
              </Badge>
              {article.tags && article.tags.filter(tag => tag !== 'auto-generated').slice(0, 2).map(tag => (
                <Badge key={tag} variant="outline" className="text-xs">{tag}</Badge>
              ))}
            </div>

          </CardHeader>
        ) : (
          /* Original header for manual articles */
          <CardHeader>
            <div className="flex items-start justify-between">
              <div className="space-y-2">
                <div className="flex items-center gap-2">
                  <BookOpen className="h-5 w-5 text-muted-foreground" />
                  <Badge variant={article.type === 'Internal' ? 'secondary' : 'outline'}>
                    {article.type}
                  </Badge>
                  {article.tags && article.tags.length > 0 && (
                    <div className="flex gap-1">
                      {article.tags.slice(0, 3).map(tag => (
                        <Badge key={tag} variant="outline" className="text-xs">{tag}</Badge>
                      ))}
                    </div>
                  )}
                </div>

                <div className="flex items-center gap-4 text-sm text-muted-foreground">
                  <div className="flex items-center gap-1">
                    <User className="h-4 w-4" />
                    By {article.author}
                  </div>
                  <div className="flex items-center gap-1">
                    <Calendar className="h-4 w-4" />
                    {format(new Date(article.lastUpdated), 'MMM d, yyyy')}
                  </div>
                  <div className="flex items-center gap-1">
                    <BookOpen className="h-4 w-4" />
                    {article.category}
                  </div>
                </div>
              </div>
            </div>
          </CardHeader>
        )}
        <CardContent className="pt-0">
          <BlockViewer blocks={blocks} />
        </CardContent>
      </Card>
    </div>
  );
}
