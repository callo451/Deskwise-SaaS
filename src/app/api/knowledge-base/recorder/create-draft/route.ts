import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { RecorderService } from '@/lib/services/recorder'
import { KnowledgeBaseService } from '@/lib/services/knowledge-base'
import { z } from 'zod'

const createDraftSchema = z.object({
  sessionId: z.string().min(1, 'Session ID is required'),
  category: z.string().optional().default('How-To'),
  tags: z.array(z.string()).optional().default([]),
  visibility: z.enum(['internal', 'public']).optional().default('internal'),
})

/**
 * Build step-by-step HTML content for TipTap editor
 * Each step is a section with heading, description, and screenshot
 */
function buildStepByStepContent(
  steps: any[],
  screenshots: any[],
  metadata: { url: string; title: string }
): string {
  // Introduction section
  let html = `<h1>${metadata.title}</h1>`
  html += `<p><em>This step-by-step guide was automatically generated from a screen recording. Please review and edit as needed.</em></p>`
  html += `<p>Recorded on: <strong>${new URL(metadata.url).hostname}</strong></p>`
  html += `<hr />`

  // Steps section
  html += `<h2>Steps</h2>`

  steps.forEach((step) => {
    const screenshot = screenshots.find(s => s.stepNumber === step.stepNumber)

    // Step heading
    html += `<h3>Step ${step.stepNumber}: ${step.description}</h3>`

    // Step description with element details
    if (step.element) {
      html += `<p><strong>Action:</strong> ${step.action}</p>`

      if (step.element.text) {
        html += `<p><strong>Element:</strong> ${step.element.tagName} - "${step.element.text}"</p>`
      } else if (step.element.id || step.element.className) {
        const identifier = step.element.id ? `#${step.element.id}` : `.${step.element.className.split(' ')[0]}`
        html += `<p><strong>Element:</strong> ${step.element.tagName} (${identifier})</p>`
      }
    }

    // Screenshot
    if (screenshot) {
      html += `<img src="${screenshot.url}" alt="Step ${step.stepNumber} - ${step.description}" />`
    }

    // Add spacing between steps
    html += `<p></p>`
  })

  // Conclusion section
  html += `<hr />`
  html += `<h2>Summary</h2>`
  html += `<p>This guide covered ${steps.length} steps to complete the task. Please update this article with any additional context, prerequisites, or troubleshooting tips.</p>`

  return html
}

/**
 * POST /api/knowledge-base/recorder/create-draft
 * Create a draft article from a recording session (structured for step-by-step guides)
 */
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)

    if (!session?.user?.orgId || !session?.user?.id) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const body = await request.json()
    const validatedData = createDraftSchema.parse(body)

    // Get recording session
    const recordingSession = await RecorderService.getSession(
      validatedData.sessionId,
      session.user.orgId
    )

    if (!recordingSession) {
      return NextResponse.json(
        { success: false, error: 'Recording session not found' },
        { status: 404 }
      )
    }

    // Get steps for the session
    const steps = await RecorderService.getSteps(
      validatedData.sessionId,
      session.user.orgId
    )

    if (steps.length === 0) {
      return NextResponse.json(
        { success: false, error: 'No steps found in recording session' },
        { status: 400 }
      )
    }

    // Get screenshots for the session
    const screenshots = await RecorderService.getSessionScreenshots(
      validatedData.sessionId,
      session.user.orgId
    )

    // Build step-by-step HTML content for TipTap
    const htmlContent = buildStepByStepContent(
      steps,
      screenshots,
      {
        url: recordingSession.url,
        title: recordingSession.title,
      }
    )

    // Create DRAFT KB article
    const article = await KnowledgeBaseService.createArticle(
      session.user.orgId,
      {
        title: recordingSession.title,
        content: htmlContent,
        category: validatedData.category,
        tags: [
          ...validatedData.tags,
          'draft',
          'auto-generated',
          'screen-recording',
        ],
        visibility: validatedData.visibility,
        status: 'draft', // KEY DIFFERENCE: Create as draft
        autoGenerated: true,
        recordingMetadata: {
          sessionId: recordingSession.sessionId,
          stepCount: steps.length,
          duration: recordingSession.duration,
          url: recordingSession.url,
        },
      },
      session.user.id
    )

    // Link article to session
    await RecorderService.linkArticle(
      validatedData.sessionId,
      session.user.orgId,
      article._id.toString()
    )

    // Update session status to completed
    await RecorderService.updateSession(
      validatedData.sessionId,
      session.user.orgId,
      { status: 'completed' }
    )

    return NextResponse.json({
      success: true,
      data: {
        articleId: article._id.toString(),
        title: article.title,
        stepCount: steps.length,
        screenshotCount: screenshots.length,
        status: 'draft',
      },
      message: 'Draft article created successfully. Please review and publish.',
    })
  } catch (error: any) {
    console.error('Error creating draft article:', error)

    if (error.name === 'ZodError') {
      return NextResponse.json(
        { success: false, error: 'Validation error', details: error.errors },
        { status: 400 }
      )
    }

    return NextResponse.json(
      { success: false, error: error.message || 'Internal server error' },
      { status: 500 }
    )
  }
}
