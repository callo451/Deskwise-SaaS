import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { RecorderService } from '@/lib/services/recorder'
import { KnowledgeBaseService } from '@/lib/services/knowledge-base'
import { generateArticleFromSteps } from '@/ai/genkit'
import { z } from 'zod'

const generateArticleSchema = z.object({
  sessionId: z.string().min(1, 'Session ID is required'),
  category: z.string().optional().default('How-To'),
  tags: z.array(z.string()).optional().default([]),
  visibility: z.enum(['internal', 'public']).optional().default('internal'),
  customTitle: z.string().optional(),
  customDescription: z.string().optional(),
})

/**
 * POST /api/knowledge-base/recorder/generate
 * Generate a knowledge base article from a recording session
 */
export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)

    if (!session?.user?.orgId || !session?.user?.id) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const body = await request.json()
    const validatedData = generateArticleSchema.parse(body)

    // Get recording session
    const recordingSession = await RecorderService.getSession(
      validatedData.sessionId,
      session.user.orgId
    )

    if (!recordingSession) {
      return NextResponse.json(
        { success: false, error: 'Recording session not found' },
        { status: 404 }
      )
    }

    // Get steps for the session
    const steps = await RecorderService.getSteps(
      validatedData.sessionId,
      session.user.orgId
    )

    if (steps.length === 0) {
      return NextResponse.json(
        { success: false, error: 'No steps found in recording session' },
        { status: 400 }
      )
    }

    // Get screenshots for the session
    const screenshots = await RecorderService.getSessionScreenshots(
      validatedData.sessionId,
      session.user.orgId
    )

    // Map steps with screenshot URLs
    const stepsWithScreenshots = steps.map((step) => ({
      stepNumber: step.stepNumber,
      action: step.action,
      description: step.description,
      element: step.element,
      screenshotUrl: screenshots.find((s) => s.stepNumber === step.stepNumber)?.url,
      url: step.url,
    }))

    // Generate article content using AI
    const aiContent = await generateArticleFromSteps(
      stepsWithScreenshots,
      {
        url: recordingSession.url,
        title: validatedData.customTitle || recordingSession.title,
        description: validatedData.customDescription || recordingSession.description,
      }
    )

    // Build markdown content with screenshots embedded
    let markdownContent = aiContent

    // Append screenshots section if there are screenshots
    if (screenshots.length > 0) {
      markdownContent += '\n\n---\n\n## Screenshots\n\n'
      screenshots.forEach((screenshot) => {
        const step = steps.find((s) => s.stepNumber === screenshot.stepNumber)
        markdownContent += `### Step ${screenshot.stepNumber}: ${step?.description || 'Action'}\n\n`
        markdownContent += `![Step ${screenshot.stepNumber}](${screenshot.url})\n\n`
      })
    }

    // Create KB article
    const article = await KnowledgeBaseService.createArticle(
      session.user.orgId,
      {
        title: validatedData.customTitle || recordingSession.title,
        content: markdownContent,
        category: validatedData.category,
        tags: [
          ...validatedData.tags,
          'auto-generated',
          'screen-recording',
        ],
        visibility: validatedData.visibility,
        autoGenerated: true,
        recordingMetadata: {
          sessionId: recordingSession.sessionId,
          stepCount: steps.length,
          duration: recordingSession.duration,
          url: recordingSession.url,
        },
      },
      session.user.id
    )

    // Link article to session
    await RecorderService.linkArticle(
      validatedData.sessionId,
      session.user.orgId,
      article._id.toString()
    )

    // Update session status to completed
    await RecorderService.updateSession(
      validatedData.sessionId,
      session.user.orgId,
      { status: 'completed' }
    )

    return NextResponse.json({
      success: true,
      data: {
        articleId: article._id.toString(),
        title: article.title,
        stepCount: steps.length,
        screenshotCount: screenshots.length,
      },
      message: 'Article generated successfully',
    })
  } catch (error: any) {
    console.error('Error generating article:', error)

    if (error.name === 'ZodError') {
      return NextResponse.json(
        { success: false, error: 'Validation error', details: error.errors },
        { status: 400 }
      )
    }

    return NextResponse.json(
      { success: false, error: error.message || 'Internal server error' },
      { status: 500 }
    )
  }
}
