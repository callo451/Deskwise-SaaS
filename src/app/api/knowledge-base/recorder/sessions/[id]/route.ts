import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { RecorderService } from '@/lib/services/recorder'
import { z } from 'zod'

const updateSessionSchema = z.object({
  title: z.string().min(1).optional(),
  description: z.string().optional(),
  status: z.enum(['recording', 'paused', 'completed', 'archived']).optional(),
  duration: z.number().optional(),
})

/**
 * GET /api/knowledge-base/recorder/sessions/[id]
 * Get a single recording session
 */
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions)

    if (!session?.user?.orgId) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const { id } = await params

    const recordingSession = await RecorderService.getSession(
      id,
      session.user.orgId
    )

    if (!recordingSession) {
      return NextResponse.json(
        { success: false, error: 'Session not found' },
        { status: 404 }
      )
    }

    return NextResponse.json({
      success: true,
      data: recordingSession,
    })
  } catch (error: any) {
    console.error('Error fetching recording session:', error)
    return NextResponse.json(
      { success: false, error: error.message || 'Internal server error' },
      { status: 500 }
    )
  }
}

/**
 * PUT /api/knowledge-base/recorder/sessions/[id]
 * Update a recording session
 *
 * AUTO-GENERATE ARTICLE: When status changes to 'completed',
 * automatically generates a KB article from the recording
 */
export async function PUT(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions)

    if (!session?.user?.orgId || !session?.user?.id) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const { id } = await params
    const body = await request.json()
    const validatedData = updateSessionSchema.parse(body)

    // Get the existing session to check status change
    const existingSession = await RecorderService.getSessionById(
      id,
      session.user.orgId
    )

    if (!existingSession) {
      return NextResponse.json(
        { success: false, error: 'Session not found' },
        { status: 404 }
      )
    }

    // Update the session
    const recordingSession = await RecorderService.updateSession(
      id,
      session.user.orgId,
      validatedData
    )

    if (!recordingSession) {
      return NextResponse.json(
        { success: false, error: 'Session not found' },
        { status: 404 }
      )
    }

    // AUTO-GENERATE ARTICLE when status becomes 'completed'
    let autoGeneratedArticle = null
    if (
      validatedData.status === 'completed' &&
      existingSession.status !== 'completed' &&
      !existingSession.articleId
    ) {
      try {
        // Import services
        const { KnowledgeBaseService } = await import('@/lib/services/knowledge-base')
        const { generateArticleFromSteps } = await import('@/ai/genkit')

        // Get steps and screenshots
        const steps = await RecorderService.getSteps(
          recordingSession.sessionId,
          session.user.orgId
        )
        const screenshots = await RecorderService.getSessionScreenshots(
          recordingSession.sessionId,
          session.user.orgId
        )

        if (steps.length > 0) {
          // Map steps with screenshots
          const stepsWithScreenshots = steps.map((step) => ({
            stepNumber: step.stepNumber,
            action: step.action,
            description: step.description,
            element: step.element,
            screenshotUrl: screenshots.find((s) => s.stepNumber === step.stepNumber)?.url,
            url: step.url,
          }))

          // Generate AI content
          const aiContent = await generateArticleFromSteps(
            stepsWithScreenshots,
            {
              url: recordingSession.url,
              title: recordingSession.title,
              description: recordingSession.description,
            }
          )

          // Build markdown with screenshots
          let markdownContent = aiContent
          if (screenshots.length > 0) {
            markdownContent += '\n\n---\n\n## Screenshots\n\n'
            screenshots.forEach((screenshot) => {
              const step = steps.find((s) => s.stepNumber === screenshot.stepNumber)
              markdownContent += `### Step ${screenshot.stepNumber}: ${step?.description || 'Action'}\n\n`
              markdownContent += `![Step ${screenshot.stepNumber}](${screenshot.url})\n\n`
            })
          }

          // Create article
          const article = await KnowledgeBaseService.createArticle(
            session.user.orgId,
            {
              title: recordingSession.title,
              content: markdownContent,
              category: 'How-To',
              tags: ['auto-generated', 'screen-recording'],
              visibility: 'internal',
              autoGenerated: true,
              recordingMetadata: {
                sessionId: recordingSession.sessionId,
                stepCount: steps.length,
                duration: recordingSession.duration,
                url: recordingSession.url,
                recordedAt: recordingSession.createdAt,
              },
            },
            session.user.id
          )

          // Link article to session
          await RecorderService.linkArticle(
            recordingSession.sessionId,
            session.user.orgId,
            article._id.toString()
          )

          autoGeneratedArticle = {
            articleId: article._id.toString(),
            title: article.title,
          }
        }
      } catch (error) {
        console.error('Auto-generation failed:', error)
        // Continue without failing the session update
      }
    }

    return NextResponse.json({
      success: true,
      data: recordingSession,
      autoGenerated: !!autoGeneratedArticle,
      article: autoGeneratedArticle,
      message: autoGeneratedArticle
        ? 'Session updated and article auto-generated successfully'
        : 'Session updated successfully',
    })
  } catch (error: any) {
    console.error('Error updating recording session:', error)

    if (error.name === 'ZodError') {
      return NextResponse.json(
        { success: false, error: 'Validation error', details: error.errors },
        { status: 400 }
      )
    }

    return NextResponse.json(
      { success: false, error: error.message || 'Internal server error' },
      { status: 500 }
    )
  }
}

/**
 * DELETE /api/knowledge-base/recorder/sessions/[id]
 * Delete a recording session (soft delete)
 */
export async function DELETE(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const session = await getServerSession(authOptions)

    if (!session?.user?.orgId) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const { id } = await params

    const deleted = await RecorderService.deleteSession(
      id,
      session.user.orgId
    )

    if (!deleted) {
      return NextResponse.json(
        { success: false, error: 'Session not found' },
        { status: 404 }
      )
    }

    return NextResponse.json({
      success: true,
      message: 'Session deleted successfully',
    })
  } catch (error: any) {
    console.error('Error deleting recording session:', error)
    return NextResponse.json(
      { success: false, error: error.message || 'Internal server error' },
      { status: 500 }
    )
  }
}
