'use client'

import { useState, useEffect } from 'react'
import { useParams, useRouter } from 'next/navigation'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Badge } from '@/components/ui/badge'
import { ArrowLeft, Sparkles, Loader2, Save, Eye, Image as ImageIcon, Edit as EditIcon } from 'lucide-react'
import AdvancedTiptapEditor from '@/components/knowledge-base/AdvancedTiptapEditor'
import ScreenshotEditor from '@/components/knowledge-base/ScreenshotEditor'
import { useToast } from '@/hooks/use-toast'

interface Article {
  _id: string
  title: string
  content: string
  category: string
  tags: string[]
  visibility: 'internal' | 'public'
  status: 'draft' | 'published' | 'archived'
  author: string
  autoGenerated: boolean
  recordingMetadata?: {
    sessionId: string
    stepCount: number
    duration?: number
    url?: string
  }
}

interface Screenshot {
  _id: string
  sessionId: string
  stepNumber: number
  url: string
  timestamp: string
  annotations?: any[]
}

export default function EditArticlePage() {
  const params = useParams()
  const router = useRouter()
  const { toast } = useToast()
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [publishing, setPublishing] = useState(false)
  const [generating, setGenerating] = useState(false)
  const [article, setArticle] = useState<Article | null>(null)
  const [screenshots, setScreenshots] = useState<Screenshot[]>([])
  const [loadingScreenshots, setLoadingScreenshots] = useState(false)
  const [editingScreenshot, setEditingScreenshot] = useState<Screenshot | null>(null)
  const [formData, setFormData] = useState({
    title: '',
    content: '',
    category: 'General',
    tags: '',
    visibility: 'internal' as 'internal' | 'public',
    status: 'draft' as 'draft' | 'published' | 'archived',
  })

  useEffect(() => {
    if (params.id) {
      fetchArticle()
    }
  }, [params.id])

  const fetchArticle = async () => {
    try {
      const response = await fetch(`/api/knowledge-base/${params.id}`)
      const data = await response.json()

      if (data.success) {
        const article = data.data
        setArticle(article)
        setFormData({
          title: article.title,
          content: article.content,
          category: article.category,
          tags: article.tags.join(', '),
          visibility: article.visibility,
          status: article.status || 'published',
        })

        // Fetch screenshots if this article has recording metadata
        if (article.recordingMetadata?.sessionId) {
          fetchScreenshots(article.recordingMetadata.sessionId)
        }
      } else {
        toast({
          title: 'Error',
          description: 'Failed to load article',
          variant: 'destructive',
        })
        router.push('/knowledge')
      }
    } catch (error) {
      console.error('Error fetching article:', error)
      toast({
        title: 'Error',
        description: 'Failed to load article',
        variant: 'destructive',
      })
      router.push('/knowledge')
    } finally {
      setLoading(false)
    }
  }

  const fetchScreenshots = async (sessionId: string) => {
    setLoadingScreenshots(true)
    try {
      const response = await fetch(`/api/knowledge-base/recorder/screenshots?sessionId=${sessionId}`)
      const data = await response.json()

      if (data.success) {
        setScreenshots(data.data || [])
      } else {
        console.error('Failed to load screenshots:', data.error)
      }
    } catch (error) {
      console.error('Error fetching screenshots:', error)
    } finally {
      setLoadingScreenshots(false)
    }
  }

  const handleChange = (field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const handleGenerateAI = async () => {
    const prompt = window.prompt('What would you like to improve or add to the article?')
    if (!prompt) return

    setGenerating(true)
    try {
      const response = await fetch('/api/knowledge-base/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          prompt: `${prompt}\n\nCurrent content:\n${formData.content}`,
          type: 'article'
        }),
      })

      const data = await response.json()

      if (data.success) {
        const shouldReplace = window.confirm('Replace current content with AI-generated content?')
        if (shouldReplace) {
          setFormData(prev => ({ ...prev, content: data.data.content }))
          toast({
            title: 'Content Generated',
            description: 'AI content has been generated successfully',
          })
        }
      } else {
        toast({
          title: 'Error',
          description: 'Failed to generate content',
          variant: 'destructive',
        })
      }
    } catch (error) {
      console.error('Error generating content:', error)
      toast({
        title: 'Error',
        description: 'Failed to generate content',
        variant: 'destructive',
      })
    } finally {
      setGenerating(false)
    }
  }

  const handleSaveDraft = async () => {
    setSaving(true)

    try {
      const response = await fetch(`/api/knowledge-base/${params.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...formData,
          tags: formData.tags.split(',').map(t => t.trim()).filter(t => t),
          status: 'draft', // Ensure it stays as draft
        }),
      })

      const data = await response.json()

      if (data.success) {
        toast({
          title: 'Draft Saved',
          description: 'Your changes have been saved',
        })
        setFormData(prev => ({ ...prev, status: 'draft' }))
      } else {
        toast({
          title: 'Error',
          description: data.error || 'Failed to save draft',
          variant: 'destructive',
        })
      }
    } catch (error) {
      console.error('Error saving draft:', error)
      toast({
        title: 'Error',
        description: 'Failed to save draft',
        variant: 'destructive',
      })
    } finally {
      setSaving(false)
    }
  }

  const handlePublish = async () => {
    setPublishing(true)

    try {
      const response = await fetch(`/api/knowledge-base/${params.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          ...formData,
          tags: formData.tags.split(',').map(t => t.trim()).filter(t => t),
          status: 'published', // Publish the article
        }),
      })

      const data = await response.json()

      if (data.success) {
        toast({
          title: 'Article Published!',
          description: 'Your article is now live',
        })
        router.push(`/knowledge/${params.id}`)
      } else {
        toast({
          title: 'Error',
          description: data.error || 'Failed to publish article',
          variant: 'destructive',
        })
      }
    } catch (error) {
      console.error('Error publishing article:', error)
      toast({
        title: 'Error',
        description: 'Failed to publish article',
        variant: 'destructive',
      })
    } finally {
      setPublishing(false)
    }
  }

  const handleSaveScreenshot = async (editedImageData: string, annotations: any[]) => {
    if (!editingScreenshot) return

    try {
      const response = await fetch(`/api/knowledge-base/recorder/screenshots/${editingScreenshot._id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          imageData: editedImageData,
          annotations,
        }),
      })

      const data = await response.json()

      if (data.success) {
        // Update screenshot in local state
        setScreenshots(prev =>
          prev.map(s => s._id === editingScreenshot._id ? { ...s, url: data.data.url, annotations } : s)
        )

        // Update article content to use new screenshot URL
        const oldUrl = editingScreenshot.url
        const newUrl = data.data.url
        if (formData.content.includes(oldUrl)) {
          setFormData(prev => ({
            ...prev,
            content: prev.content.replace(new RegExp(oldUrl, 'g'), newUrl),
          }))
        }

        toast({
          title: 'Screenshot Updated',
          description: 'Your changes have been saved',
        })
        setEditingScreenshot(null)
      } else {
        toast({
          title: 'Error',
          description: data.error || 'Failed to update screenshot',
          variant: 'destructive',
        })
      }
    } catch (error) {
      console.error('Error saving screenshot:', error)
      toast({
        title: 'Error',
        description: 'Failed to save screenshot',
        variant: 'destructive',
      })
    }
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="flex flex-col items-center gap-2">
          <Loader2 className="w-8 h-8 animate-spin text-muted-foreground" />
          <p className="text-muted-foreground">Loading article...</p>
        </div>
      </div>
    )
  }

  if (!article) {
    return (
      <div className="text-center py-12">
        <h2 className="text-2xl font-bold mb-2">Article Not Found</h2>
        <Link href="/knowledge">
          <Button>Back to Knowledge Base</Button>
        </Link>
      </div>
    )
  }

  return (
    <div className="space-y-6 max-w-6xl">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Link href={`/knowledge/${params.id}`}>
            <Button variant="ghost" size="icon">
              <ArrowLeft className="w-4 h-4" />
            </Button>
          </Link>
          <div>
            <div className="flex items-center gap-2">
              <h1 className="text-3xl font-bold tracking-tight">Edit Article</h1>
              {formData.status === 'draft' && (
                <Badge variant="secondary">Draft</Badge>
              )}
              {article.autoGenerated && (
                <Badge variant="outline">Auto-Generated</Badge>
              )}
            </div>
            <p className="text-muted-foreground">Update article information</p>
          </div>
        </div>

        {/* Preview and Publish buttons */}
        <div className="flex items-center gap-2">
          <Link href={`/knowledge/${params.id}`}>
            <Button variant="outline">
              <Eye className="w-4 h-4 mr-2" />
              Preview
            </Button>
          </Link>
          <Button
            variant="outline"
            onClick={handleSaveDraft}
            disabled={saving || publishing}
          >
            <Save className="w-4 h-4 mr-2" />
            {saving ? 'Saving...' : 'Save Draft'}
          </Button>
          <Button
            onClick={handlePublish}
            disabled={saving || publishing}
          >
            {publishing ? (
              <>
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                Publishing...
              </>
            ) : (
              'Publish'
            )}
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Sidebar - Article Details */}
        <div className="lg:col-span-1 space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>Article Details</CardTitle>
              <CardDescription>Basic information</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="title">
                  Title <span className="text-destructive">*</span>
                </Label>
                <Input
                  id="title"
                  placeholder="Article title"
                  value={formData.title}
                  onChange={(e) => handleChange('title', e.target.value)}
                  required
                />
              </div>

              <div className="space-y-2">
                <Label htmlFor="category">
                  Category <span className="text-destructive">*</span>
                </Label>
                <Select
                  value={formData.category}
                  onValueChange={(value) => handleChange('category', value)}
                >
                  <SelectTrigger id="category">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="General">General</SelectItem>
                    <SelectItem value="How-To">How-To</SelectItem>
                    <SelectItem value="Troubleshooting">Troubleshooting</SelectItem>
                    <SelectItem value="FAQ">FAQ</SelectItem>
                    <SelectItem value="Policies">Policies</SelectItem>
                    <SelectItem value="Security">Security</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="visibility">
                  Visibility <span className="text-destructive">*</span>
                </Label>
                <Select
                  value={formData.visibility}
                  onValueChange={(value) => handleChange('visibility', value)}
                >
                  <SelectTrigger id="visibility">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="internal">Internal Only</SelectItem>
                    <SelectItem value="public">Public</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="tags">Tags</Label>
                <Input
                  id="tags"
                  placeholder="tag1, tag2, tag3"
                  value={formData.tags}
                  onChange={(e) => handleChange('tags', e.target.value)}
                />
              </div>

              <div className="pt-4 border-t">
                <Button
                  type="button"
                  variant="outline"
                  onClick={handleGenerateAI}
                  disabled={generating}
                  className="w-full"
                >
                  <Sparkles className="w-4 h-4 mr-2" />
                  {generating ? 'Generating...' : 'Improve with AI'}
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Content - TipTap Editor */}
        <div className="lg:col-span-3">
          <Card>
            <CardHeader>
              <CardTitle>Content</CardTitle>
              <CardDescription>
                Use the rich text editor to format your step-by-step guide
              </CardDescription>
            </CardHeader>
            <CardContent>
              <AdvancedTiptapEditor
                content={formData.content}
                onChange={(content) => handleChange('content', content)}
                placeholder="Write your article content here..."
                className="min-h-[600px]"
              />
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Screenshots Section (only if article has recording metadata) */}
      {article?.recordingMetadata && (
        <Card>
          <CardHeader>
            <div className="flex items-center gap-2">
              <ImageIcon className="w-5 h-5" />
              <CardTitle>Screenshots</CardTitle>
              {loadingScreenshots && (
                <Loader2 className="w-4 h-4 animate-spin text-muted-foreground" />
              )}
            </div>
            <CardDescription>
              Edit and annotate screenshots from the recording session
            </CardDescription>
          </CardHeader>
          <CardContent>
            {screenshots.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                No screenshots found for this article
              </div>
            ) : (
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                {screenshots.map((screenshot) => (
                  <div
                    key={screenshot._id}
                    className="group relative border rounded-lg overflow-hidden bg-muted/50 hover:bg-muted transition-colors"
                  >
                    <div className="aspect-video relative">
                      <img
                        src={screenshot.url}
                        alt={`Step ${screenshot.stepNumber}`}
                        className="w-full h-full object-cover"
                      />
                      <div className="absolute inset-0 bg-black/0 group-hover:bg-black/50 transition-colors flex items-center justify-center opacity-0 group-hover:opacity-100">
                        <Button
                          variant="secondary"
                          size="sm"
                          onClick={() => setEditingScreenshot(screenshot)}
                        >
                          <EditIcon className="w-4 h-4 mr-2" />
                          Edit
                        </Button>
                      </div>
                    </div>
                    <div className="p-2 text-sm">
                      <p className="font-medium">Step {screenshot.stepNumber}</p>
                      {screenshot.annotations && screenshot.annotations.length > 0 && (
                        <p className="text-xs text-muted-foreground">
                          {screenshot.annotations.length} annotation{screenshot.annotations.length !== 1 ? 's' : ''}
                        </p>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* Screenshot Editor Modal */}
      {editingScreenshot && (
        <ScreenshotEditor
          imageUrl={editingScreenshot.url}
          onSave={handleSaveScreenshot}
          onCancel={() => setEditingScreenshot(null)}
        />
      )}
    </div>
  )
}
