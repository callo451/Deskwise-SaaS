'use client'

import { useState, useEffect } from 'react'
import { useParams } from 'next/navigation'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { ArrowLeft, Eye, ThumbsUp, ThumbsDown, Edit, Video } from 'lucide-react'
import { formatRelativeTime } from '@/lib/utils'

interface Article {
  _id: string
  title: string
  content: string
  category: string
  tags: string[]
  visibility: 'internal' | 'public'
  author: string
  views: number
  helpful: number
  notHelpful: number
  autoGenerated: boolean
  createdAt: string
  updatedAt: string
  recordingMetadata?: {
    sessionId: string
    stepCount: number
    duration?: number
    url?: string
    recordedAt?: Date
  }
}

export default function ArticleDetailPage() {
  const params = useParams()
  const [article, setArticle] = useState<Article | null>(null)
  const [loading, setLoading] = useState(true)
  const [voting, setVoting] = useState(false)
  const [hasVoted, setHasVoted] = useState(false)

  useEffect(() => {
    if (params.id) {
      fetchArticle()
      // Check if user has already voted (stored in localStorage)
      const voted = localStorage.getItem(`kb-voted-${params.id}`)
      if (voted) {
        setHasVoted(true)
      }
    }
  }, [params.id])

  const fetchArticle = async () => {
    try {
      const response = await fetch(`/api/knowledge-base/${params.id}`)
      const data = await response.json()

      if (data.success) {
        setArticle(data.data)
      }
    } catch (error) {
      console.error('Error fetching article:', error)
    } finally {
      setLoading(false)
    }
  }

  const handleVote = async (isHelpful: boolean) => {
    if (hasVoted || voting) return

    setVoting(true)
    try {
      const response = await fetch(`/api/knowledge-base/${params.id}/helpful`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ isHelpful }),
      })

      const data = await response.json()

      if (data.success) {
        // Update article counts
        if (article) {
          setArticle({
            ...article,
            helpful: data.data.helpful,
            notHelpful: data.data.notHelpful,
          })
        }
        // Mark as voted in localStorage
        localStorage.setItem(`kb-voted-${params.id}`, 'true')
        setHasVoted(true)
      } else {
        alert('Failed to record feedback')
      }
    } catch (error) {
      console.error('Error recording feedback:', error)
      alert('Failed to record feedback')
    } finally {
      setVoting(false)
    }
  }

  if (loading) {
    return <div className="flex items-center justify-center min-h-[400px]"><p className="text-muted-foreground">Loading article...</p></div>
  }

  if (!article) {
    return <div className="text-center py-12"><h2 className="text-2xl font-bold mb-2">Article Not Found</h2><Link href="/knowledge"><Button>Back to Knowledge Base</Button></Link></div>
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center gap-4">
        <Link href="/knowledge"><Button variant="ghost" size="icon"><ArrowLeft className="w-4 h-4" /></Button></Link>
        <div className="flex-1">
          <h1 className="text-3xl font-bold tracking-tight">{article.title}</h1>
          <div className="flex items-center gap-2 mt-2">
            <Badge variant={article.visibility === 'public' ? 'default' : 'secondary'}>{article.visibility}</Badge>
            <Badge variant="outline">{article.category}</Badge>
            {article.recordingMetadata ? (
              <Badge variant="outline" className="bg-purple-50 text-purple-700 border-purple-300">
                <Video className="w-3 h-3 mr-1" />
                Recorded
              </Badge>
            ) : article.autoGenerated ? (
              <Badge variant="outline">AI Generated</Badge>
            ) : null}
          </div>
        </div>
        <div className="flex items-center gap-2">
          {article.recordingMetadata && (
            <a
              href={`/api/knowledge-base/recorder/sessions/${article.recordingMetadata.sessionId}`}
              target="_blank"
              rel="noopener noreferrer"
            >
              <Button variant="outline" size="sm">
                <Video className="w-4 h-4 mr-2" />
                View Recording
              </Button>
            </a>
          )}
          <Link href={`/knowledge/${article._id}/edit`}>
            <Button variant="outline">
              <Edit className="w-4 h-4 mr-2" />
              Edit
            </Button>
          </Link>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-2 space-y-6">
          <Card>
            <CardContent className="pt-6">
              <div className="prose prose-sm max-w-none">
                <div className="whitespace-pre-wrap">{article.content}</div>
              </div>
            </CardContent>
          </Card>

          {/* Helpful Voting */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Was this article helpful?</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex items-center gap-3">
                <Button
                  variant={hasVoted ? "outline" : "default"}
                  onClick={() => handleVote(true)}
                  disabled={hasVoted || voting}
                  className="flex-1"
                >
                  <ThumbsUp className="w-4 h-4 mr-2" />
                  Yes ({article.helpful})
                </Button>
                <Button
                  variant={hasVoted ? "outline" : "default"}
                  onClick={() => handleVote(false)}
                  disabled={hasVoted || voting}
                  className="flex-1"
                >
                  <ThumbsDown className="w-4 h-4 mr-2" />
                  No ({article.notHelpful})
                </Button>
              </div>
              {hasVoted && (
                <p className="text-sm text-muted-foreground mt-3 text-center">
                  Thank you for your feedback!
                </p>
              )}
            </CardContent>
          </Card>
        </div>

        <div className="space-y-6">
          <Card>
            <CardHeader><CardTitle className="text-lg">Stats</CardTitle></CardHeader>
            <CardContent className="space-y-3">
              <div className="flex items-center justify-between text-sm">
                <div className="flex items-center gap-2"><Eye className="w-4 h-4 text-muted-foreground" /><span>Views</span></div>
                <span className="font-medium">{article.views}</span>
              </div>
              <div className="flex items-center justify-between text-sm">
                <div className="flex items-center gap-2"><ThumbsUp className="w-4 h-4 text-muted-foreground" /><span>Helpful</span></div>
                <span className="font-medium">{article.helpful}</span>
              </div>
              <div className="flex items-center justify-between text-sm">
                <div className="flex items-center gap-2"><ThumbsDown className="w-4 h-4 text-muted-foreground" /><span>Not Helpful</span></div>
                <span className="font-medium">{article.notHelpful}</span>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader><CardTitle className="text-lg">Details</CardTitle></CardHeader>
            <CardContent className="space-y-3 text-sm">
              <div><span className="text-muted-foreground">Author:</span> <span className="font-medium">User {article.author}</span></div>
              <div><span className="text-muted-foreground">Created:</span> <span className="font-medium">{formatRelativeTime(article.createdAt)}</span></div>
              <div><span className="text-muted-foreground">Updated:</span> <span className="font-medium">{formatRelativeTime(article.updatedAt)}</span></div>
              {article.recordingMetadata && (
                <>
                  <div className="border-t pt-3">
                    <div className="flex items-center gap-2 mb-2 text-purple-700">
                      <Video className="w-4 h-4" />
                      <span className="font-medium">Recording Info</span>
                    </div>
                    <div className="space-y-2 pl-6">
                      <div><span className="text-muted-foreground">Steps:</span> <span className="font-medium">{article.recordingMetadata.stepCount}</span></div>
                      {article.recordingMetadata.duration && (
                        <div><span className="text-muted-foreground">Duration:</span> <span className="font-medium">{Math.floor(article.recordingMetadata.duration / 1000)}s</span></div>
                      )}
                      {article.recordingMetadata.url && (
                        <div className="break-all">
                          <span className="text-muted-foreground">Source:</span> <a href={article.recordingMetadata.url} target="_blank" rel="noopener noreferrer" className="font-medium text-blue-600 hover:underline">{new URL(article.recordingMetadata.url).hostname}</a>
                        </div>
                      )}
                    </div>
                  </div>
                </>
              )}
              {article.tags.length > 0 && (
                <div className={article.recordingMetadata ? '' : 'border-t pt-3'}>
                  <span className="text-muted-foreground">Tags:</span>
                  <div className="flex flex-wrap gap-2 mt-2">
                    {article.tags.map((tag) => (
                      <Badge key={tag} variant="outline" className="text-xs">{tag}</Badge>
                    ))}
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
