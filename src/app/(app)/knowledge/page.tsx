'use client'

import { useState, useEffect } from 'react'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { Badge } from '@/components/ui/badge'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import {
  Plus,
  Search,
  Eye,
  ThumbsUp,
  Video,
  Filter,
  X,
  FileDown,
  Edit,
  Trash2,
  MoreVertical,
  Lock,
  BookOpen,
  List,
  Grid,
  Tag as TagIcon,
  Sparkles,
} from 'lucide-react'
import { formatRelativeTime } from '@/lib/utils'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from '@/components/ui/alert-dialog'
import { SettingsHeader } from '@/components/settings/settings-header'
import { ExtensionInstallDialog } from '@/components/knowledge-base/extension-install-dialog'

// ============================================================================
// TypeScript Interfaces
// ============================================================================

interface Article {
  _id: string
  title: string
  content: string
  category: string
  tags: string[]
  visibility: 'internal' | 'public'
  author: string
  views: number
  helpful: number
  notHelpful: number
  autoGenerated: boolean
  createdAt: string
  updatedAt: string
  isArchived?: boolean
  recordingMetadata?: {
    sessionId: string
    stepCount: number
    duration?: number
    url?: string
    recordedAt?: Date
  }
}

interface KBStats {
  total: number
  public: number
  internal: number
  archived: number
  totalViews: number
  totalHelpful: number
  totalNotHelpful: number
  categoriesCount: number
  tagsCount: number
}

interface Category {
  name: string
  count: number
}

interface Tag {
  name: string
  count: number
}

// ============================================================================
// Main Component
// ============================================================================

export default function KnowledgeBasePage() {
  // State Management
  const [articles, setArticles] = useState<Article[]>([])
  const [stats, setStats] = useState<KBStats | null>(null)
  const [categories, setCategories] = useState<Category[]>([])
  const [tags, setTags] = useState<Tag[]>([])
  const [loading, setLoading] = useState(true)

  // Filter States
  const [search, setSearch] = useState('')
  const [categoryFilter, setCategoryFilter] = useState('')
  const [visibilityFilter, setVisibilityFilter] = useState('')
  const [tagsFilter, setTagsFilter] = useState<string[]>([])
  const [sortBy, setSortBy] = useState<'newest' | 'mostViewed' | 'mostHelpful' | 'titleAZ'>('newest')
  const [showFilters, setShowFilters] = useState(false)

  // View Mode (List or Grid)
  const [viewMode, setViewMode] = useState<'list' | 'grid'>(() => {
    if (typeof window !== 'undefined') {
      return (localStorage.getItem('kb-view-mode') as 'list' | 'grid') || 'list'
    }
    return 'list'
  })

  // Delete Dialog
  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false)
  const [articleToDelete, setArticleToDelete] = useState<string | null>(null)

  // Selected Category (from sidebar)
  const [selectedCategory, setSelectedCategory] = useState<string>('')

  // ============================================================================
  // Data Fetching
  // ============================================================================

  useEffect(() => {
    fetchData()
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [categoryFilter, visibilityFilter, tagsFilter, selectedCategory])

  const fetchData = async () => {
    setLoading(true)
    try {
      await Promise.all([fetchArticles(), fetchStats(), fetchCategories(), fetchTags()])
    } finally {
      setLoading(false)
    }
  }

  const fetchArticles = async () => {
    try {
      const params = new URLSearchParams()

      // Use selectedCategory from sidebar or manual category filter
      const activeCategory = selectedCategory || categoryFilter
      if (activeCategory && activeCategory !== 'all') {
        params.set('category', activeCategory)
      }

      if (visibilityFilter && visibilityFilter !== 'all') {
        params.set('visibility', visibilityFilter)
      }

      if (tagsFilter.length > 0) {
        params.set('tags', tagsFilter.join(','))
      }

      if (search) {
        params.set('search', search)
      }

      const response = await fetch(`/api/knowledge-base?${params}`)
      const data = await response.json()

      if (data.success) {
        setArticles(data.data)
      }
    } catch (error) {
      console.error('Error fetching articles:', error)
    }
  }

  const fetchStats = async () => {
    try {
      const response = await fetch('/api/knowledge-base/stats')
      const data = await response.json()

      if (data.success) {
        setStats(data.data)
      }
    } catch (error) {
      console.error('Error fetching stats:', error)
    }
  }

  const fetchCategories = async () => {
    try {
      const response = await fetch('/api/knowledge-base/categories')
      const data = await response.json()

      if (data.success) {
        setCategories(data.data)
      }
    } catch (error) {
      console.error('Error fetching categories:', error)
    }
  }

  const fetchTags = async () => {
    try {
      const response = await fetch('/api/knowledge-base/tags')
      const data = await response.json()

      if (data.success) {
        setTags(data.data)
      }
    } catch (error) {
      console.error('Error fetching tags:', error)
    }
  }

  // ============================================================================
  // Event Handlers
  // ============================================================================

  const handleSearch = () => {
    fetchArticles()
  }

  const handleClearFilters = () => {
    setSearch('')
    setCategoryFilter('')
    setVisibilityFilter('')
    setTagsFilter([])
    setSelectedCategory('')
  }

  const handleViewModeChange = (mode: 'list' | 'grid') => {
    setViewMode(mode)
    if (typeof window !== 'undefined') {
      localStorage.setItem('kb-view-mode', mode)
    }
  }

  const handleDeleteArticle = async () => {
    if (!articleToDelete) return

    try {
      const response = await fetch(`/api/knowledge-base/${articleToDelete}`, {
        method: 'DELETE',
      })

      if (response.ok) {
        await fetchData()
        setDeleteDialogOpen(false)
        setArticleToDelete(null)
      }
    } catch (error) {
      console.error('Error deleting article:', error)
    }
  }

  const handleExportCSV = () => {
    const csvData = articles.map((article) => ({
      Title: article.title,
      Category: article.category,
      Visibility: article.visibility,
      Tags: article.tags.join('; '),
      Views: article.views,
      Helpful: article.helpful,
      'Auto Generated': article.autoGenerated ? 'Yes' : 'No',
      Created: new Date(article.createdAt).toLocaleDateString(),
      Updated: new Date(article.updatedAt).toLocaleDateString(),
    }))

    const headers = Object.keys(csvData[0] || {})
    const csv = [
      headers.join(','),
      ...csvData.map((row) =>
        headers.map((header) => `"${row[header as keyof typeof row]}"`).join(',')
      ),
    ].join('\n')

    const blob = new Blob([csv], { type: 'text/csv' })
    const url = window.URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `knowledge-base-export-${new Date().toISOString().split('T')[0]}.csv`
    a.click()
  }

  // ============================================================================
  // Utility Functions
  // ============================================================================

  const getVisibilityBadge = (visibility: string) => {
    return visibility === 'public' ? (
      <Badge variant="default" className="flex items-center gap-1">
        <Eye className="w-3 h-3" />
        Public
      </Badge>
    ) : (
      <Badge variant="secondary" className="flex items-center gap-1">
        <Lock className="w-3 h-3" />
        Internal
      </Badge>
    )
  }

  const getCategoryColor = (categoryName: string) => {
    // Generate consistent color based on category name
    const colors = [
      '#3B82F6', // blue
      '#10B981', // green
      '#F59E0B', // amber
      '#EF4444', // red
      '#8B5CF6', // purple
      '#EC4899', // pink
      '#14B8A6', // teal
      '#F97316', // orange
    ]
    const index = categoryName.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0) % colors.length
    return colors[index]
  }

  const stripHtml = (html: string) => {
    return html.replace(/<[^>]*>/g, '').replace(/&nbsp;/g, ' ')
  }

  // Sort articles based on selected sort option
  const sortedArticles = [...articles].sort((a, b) => {
    switch (sortBy) {
      case 'newest':
        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
      case 'mostViewed':
        return b.views - a.views
      case 'mostHelpful':
        return b.helpful - a.helpful
      case 'titleAZ':
        return a.title.localeCompare(b.title)
      default:
        return 0
    }
  })

  const hasActiveFilters =
    search || categoryFilter || visibilityFilter || tagsFilter.length > 0 || selectedCategory
  const totalArticles = stats?.total || 0
  const filteredCount = sortedArticles.length

  // Most helpful article
  const mostHelpfulArticle = articles.length > 0
    ? articles.reduce((prev, current) => (prev.helpful > current.helpful ? prev : current))
    : null

  // ============================================================================
  // Render: Category Sidebar
  // ============================================================================

  const renderCategorySidebar = () => (
    <Card className="h-fit sticky top-6 border-2 shadow-lg">
      <CardHeader className="bg-gradient-to-r from-primary/5 to-primary/10 border-b-2">
        <CardTitle className="text-base font-semibold">Categories</CardTitle>
      </CardHeader>
      <CardContent className="pt-4">
        <div className="space-y-1">
          <Button
            variant={selectedCategory === '' ? 'secondary' : 'ghost'}
            className="w-full justify-start"
            onClick={() => {
              setSelectedCategory('')
              setCategoryFilter('')
            }}
          >
            <BookOpen className="w-4 h-4 mr-2" />
            All Articles
            <Badge variant="outline" className="ml-auto">
              {totalArticles}
            </Badge>
          </Button>

          {categories.map((category) => (
            <Button
              key={category.name}
              variant={selectedCategory === category.name ? 'secondary' : 'ghost'}
              className="w-full justify-start"
              onClick={() => {
                setSelectedCategory(category.name)
                setCategoryFilter(category.name)
              }}
            >
              <div
                className="w-2 h-2 rounded-full mr-2"
                style={{ backgroundColor: getCategoryColor(category.name) }}
              />
              <span className="truncate flex-1 text-left">{category.name}</span>
              <Badge variant="outline" className="ml-2">
                {category.count}
              </Badge>
            </Button>
          ))}
        </div>
      </CardContent>
    </Card>
  )

  // ============================================================================
  // Render: List View
  // ============================================================================

  const renderListView = () => (
    <Card className="border-2 shadow-lg">
      <CardHeader className="bg-gradient-to-r from-primary/5 to-primary/10 border-b-2">
        <div className="flex items-center justify-between">
          <div>
            <CardTitle className="text-lg font-semibold">
              {filteredCount} Article{filteredCount !== 1 ? 's' : ''}
            </CardTitle>
            <CardDescription className="text-sm mt-1">Manage your knowledge base articles</CardDescription>
          </div>
        </div>
      </CardHeader>
      <CardContent className="pt-0">
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow className="bg-gradient-to-r from-accent/30 to-accent/10 hover:bg-gradient-to-r hover:from-accent/40 hover:to-accent/20">
                <TableHead className="font-semibold">Title</TableHead>
                <TableHead className="font-semibold">Category</TableHead>
                <TableHead className="font-semibold">Visibility</TableHead>
                <TableHead className="font-semibold">Stats</TableHead>
                <TableHead className="font-semibold">Updated</TableHead>
                <TableHead className="w-12 font-semibold">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {loading ? (
                <TableRow>
                  <TableCell colSpan={6} className="text-center py-12">
                    <div className="flex flex-col items-center gap-2">
                      <BookOpen className="w-8 h-8 text-muted-foreground animate-pulse" />
                      <p className="text-sm text-muted-foreground">Loading articles...</p>
                    </div>
                  </TableCell>
                </TableRow>
              ) : sortedArticles.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={6} className="text-center py-12">
                    <div className="flex flex-col items-center gap-4">
                      <BookOpen className="w-12 h-12 text-muted-foreground opacity-20" />
                      <div>
                        <p className="text-muted-foreground mb-2">
                          {hasActiveFilters
                            ? 'No articles match your filters'
                            : 'No articles found'}
                        </p>
                        {!hasActiveFilters && (
                          <>
                            <p className="text-sm text-muted-foreground mb-4">
                              Get started by creating your first article
                            </p>
                            <Link href="/knowledge/new">
                              <Button>
                                <Plus className="w-4 h-4 mr-2" />
                                Create Your First Article
                              </Button>
                            </Link>
                          </>
                        )}
                        {hasActiveFilters && (
                          <Button variant="outline" onClick={handleClearFilters}>
                            <X className="w-4 h-4 mr-2" />
                            Clear Filters
                          </Button>
                        )}
                      </div>
                    </div>
                  </TableCell>
                </TableRow>
              ) : (
                sortedArticles.map((article) => (
                  <TableRow key={article._id} className="hover:bg-accent/30 transition-all border-b-2 border-dashed">
                    <TableCell>
                      <Link href={`/knowledge/${article._id}`} className="hover:text-primary transition-colors">
                        <div>
                          <p className="font-semibold">{article.title}</p>
                          <div className="flex items-center gap-2 mt-1">
                            {article.recordingMetadata ? (
                              <Badge variant="outline" className="text-xs flex items-center gap-1 bg-purple-50 text-purple-700 border-purple-300">
                                <Video className="w-3 h-3" />
                                Recorded
                              </Badge>
                            ) : article.autoGenerated ? (
                              <Badge variant="outline" className="text-xs flex items-center gap-1">
                                <Sparkles className="w-3 h-3" />
                                AI Generated
                              </Badge>
                            ) : null}
                            {article.tags.length > 0 && (
                              <div className="flex items-center gap-1 text-xs text-muted-foreground">
                                <TagIcon className="w-3 h-3" />
                                {article.tags.slice(0, 2).join(', ')}
                                {article.tags.length > 2 && ` +${article.tags.length - 2}`}
                              </div>
                            )}
                          </div>
                        </div>
                      </Link>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <div
                          className="w-2 h-2 rounded-full"
                          style={{ backgroundColor: getCategoryColor(article.category) }}
                        />
                        <span className="text-sm">{article.category}</span>
                      </div>
                    </TableCell>
                    <TableCell>{getVisibilityBadge(article.visibility)}</TableCell>
                    <TableCell>
                      <div className="flex items-center gap-3 text-sm text-muted-foreground">
                        <div className="flex items-center gap-1">
                          <Eye className="w-4 h-4" />
                          {article.views}
                        </div>
                        <div className="flex items-center gap-1">
                          <ThumbsUp className="w-4 h-4" />
                          {article.helpful}
                        </div>
                      </div>
                    </TableCell>
                    <TableCell className="text-muted-foreground text-sm">
                      {formatRelativeTime(article.updatedAt)}
                    </TableCell>
                    <TableCell>
                      <DropdownMenu>
                        <DropdownMenuTrigger asChild>
                          <Button variant="ghost" size="sm">
                            <MoreVertical className="w-4 h-4" />
                          </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                          <DropdownMenuItem asChild>
                            <Link href={`/knowledge/${article._id}`}>
                              <BookOpen className="w-4 h-4 mr-2" />
                              View Article
                            </Link>
                          </DropdownMenuItem>
                          <DropdownMenuItem asChild>
                            <Link href={`/knowledge/${article._id}/edit`}>
                              <Edit className="w-4 h-4 mr-2" />
                              Edit
                            </Link>
                          </DropdownMenuItem>
                          <DropdownMenuItem
                            className="text-red-600"
                            onClick={() => {
                              setArticleToDelete(article._id)
                              setDeleteDialogOpen(true)
                            }}
                          >
                            <Trash2 className="w-4 h-4 mr-2" />
                            Delete
                          </DropdownMenuItem>
                        </DropdownMenuContent>
                      </DropdownMenu>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>
        </div>
      </CardContent>
    </Card>
  )

  // ============================================================================
  // Render: Grid View
  // ============================================================================

  const renderGridView = () => (
    <>
      {loading ? (
        <div className="flex flex-col items-center gap-4 py-12">
          <BookOpen className="w-12 h-12 text-muted-foreground animate-pulse" />
          <p className="text-sm text-muted-foreground">Loading articles...</p>
        </div>
      ) : sortedArticles.length === 0 ? (
        <div className="flex flex-col items-center gap-4 py-12">
          <BookOpen className="w-12 h-12 text-muted-foreground opacity-20" />
          <div className="text-center">
            <p className="text-muted-foreground mb-2">
              {hasActiveFilters ? 'No articles match your filters' : 'No articles found'}
            </p>
            {!hasActiveFilters && (
              <>
                <p className="text-sm text-muted-foreground mb-4">
                  Get started by creating your first article
                </p>
                <Link href="/knowledge/new">
                  <Button>
                    <Plus className="w-4 h-4 mr-2" />
                    Create Your First Article
                  </Button>
                </Link>
              </>
            )}
            {hasActiveFilters && (
              <Button variant="outline" onClick={handleClearFilters}>
                <X className="w-4 h-4 mr-2" />
                Clear Filters
              </Button>
            )}
          </div>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {sortedArticles.map((article) => (
            <Link key={article._id} href={`/knowledge/${article._id}`}>
              <Card className="h-full hover:shadow-lg transition-all duration-200 cursor-pointer hover:border-primary/50">
                <div
                  className="h-2 rounded-t-lg"
                  style={{ backgroundColor: getCategoryColor(article.category) }}
                />
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between gap-2 mb-2">
                    <CardTitle className="text-lg line-clamp-2">{article.title}</CardTitle>
                  </div>
                  <div className="flex items-center gap-2 flex-wrap">
                    <Badge variant="outline" className="text-xs">
                      {article.category}
                    </Badge>
                    {getVisibilityBadge(article.visibility)}
                    {article.recordingMetadata ? (
                      <Badge variant="outline" className="text-xs flex items-center gap-1 bg-purple-50 text-purple-700 border-purple-300">
                        <Video className="w-3 h-3" />
                        Recorded
                      </Badge>
                    ) : article.autoGenerated ? (
                      <Badge variant="outline" className="text-xs flex items-center gap-1">
                        <Sparkles className="w-3 h-3" />
                        AI
                      </Badge>
                    ) : null}
                  </div>
                </CardHeader>
                <CardContent className="space-y-3">
                  <p className="text-sm text-muted-foreground line-clamp-3">
                    {stripHtml(article.content).substring(0, 150)}
                    {stripHtml(article.content).length > 150 ? '...' : ''}
                  </p>

                  {article.tags.length > 0 && (
                    <div className="flex flex-wrap gap-1">
                      {article.tags.slice(0, 3).map((tag) => (
                        <Badge key={tag} variant="secondary" className="text-xs">
                          {tag}
                        </Badge>
                      ))}
                      {article.tags.length > 3 && (
                        <Badge variant="secondary" className="text-xs">
                          +{article.tags.length - 3}
                        </Badge>
                      )}
                    </div>
                  )}

                  <div className="flex items-center justify-between pt-3 border-t text-sm text-muted-foreground">
                    <div className="flex items-center gap-3">
                      <div className="flex items-center gap-1">
                        <Eye className="w-4 h-4" />
                        {article.views}
                      </div>
                      <div className="flex items-center gap-1">
                        <ThumbsUp className="w-4 h-4" />
                        {article.helpful}
                      </div>
                    </div>
                    <span className="text-xs">{formatRelativeTime(article.updatedAt)}</span>
                  </div>
                </CardContent>
              </Card>
            </Link>
          ))}
        </div>
      )}
    </>
  )

  // ============================================================================
  // Main Render
  // ============================================================================

  return (
    <div className="space-y-6">
      {/* Header with Actions */}
      <SettingsHeader
        title="Knowledge Base"
        description="Create, manage, and organize your knowledge base articles"
        icon={<BookOpen className="h-6 w-6 text-purple-600" />}
        actions={
          <div className="flex items-center gap-2">
            <Button variant="outline" size="sm" onClick={handleExportCSV}>
              <FileDown className="w-4 h-4 mr-2" />
              Export
            </Button>
            <ExtensionInstallDialog />
            <Link href="/knowledge/new">
              <Button size="sm" className="bg-purple-600 hover:bg-purple-700">
                <Plus className="w-4 h-4 mr-2" />
                New Article
              </Button>
            </Link>
          </div>
        }
      />

      {/* Stats Cards */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-5">
        <Card className="border-2 shadow-lg hover:shadow-xl transition-all hover:scale-105 border-purple-500/30 bg-purple-50/50 dark:bg-purple-950/20">
          <CardHeader className="bg-gradient-to-r from-purple-500/10 to-purple-500/5 border-b-2 pb-3">
            <div className="flex items-center justify-between">
              <CardDescription className="text-sm font-medium text-purple-700 dark:text-purple-400">Total Articles</CardDescription>
              <div className="p-1.5 bg-purple-500/20 rounded-md">
                <BookOpen className="h-4 w-4 text-purple-600" />
              </div>
            </div>
          </CardHeader>
          <CardContent className="pt-4">
            <CardTitle className="text-3xl text-purple-900 dark:text-purple-100">{stats?.total || 0}</CardTitle>
          </CardContent>
        </Card>

        <Card className="border-2 shadow-lg hover:shadow-xl transition-all hover:scale-105">
          <CardHeader className="border-b-2 border-dashed pb-3">
            <div className="flex items-center justify-between">
              <CardDescription className="text-sm font-medium">Public</CardDescription>
              <div className="p-1.5 bg-blue-500/10 rounded-md">
                <Eye className="h-4 w-4 text-blue-600" />
              </div>
            </div>
          </CardHeader>
          <CardContent className="pt-4">
            <CardTitle className="text-3xl">{stats?.public || 0}</CardTitle>
          </CardContent>
        </Card>

        <Card className="border-2 shadow-lg hover:shadow-xl transition-all hover:scale-105">
          <CardHeader className="border-b-2 border-dashed pb-3">
            <div className="flex items-center justify-between">
              <CardDescription className="text-sm font-medium">Internal</CardDescription>
              <div className="p-1.5 bg-gray-500/10 rounded-md">
                <Lock className="h-4 w-4 text-gray-600" />
              </div>
            </div>
          </CardHeader>
          <CardContent className="pt-4">
            <CardTitle className="text-3xl">{stats?.internal || 0}</CardTitle>
          </CardContent>
        </Card>

        <Card className="border-2 shadow-lg hover:shadow-xl transition-all hover:scale-105 border-blue-500/30 bg-blue-50/50 dark:bg-blue-950/20">
          <CardHeader className="border-b-2 border-dashed pb-3">
            <div className="flex items-center justify-between">
              <CardDescription className="text-sm font-medium text-blue-700 dark:text-blue-400">Total Views</CardDescription>
              <div className="p-1.5 bg-blue-500/20 rounded-md">
                <Eye className="h-4 w-4 text-blue-600" />
              </div>
            </div>
          </CardHeader>
          <CardContent className="pt-4">
            <CardTitle className="text-3xl text-blue-600">{stats?.totalViews || 0}</CardTitle>
          </CardContent>
        </Card>

        <Card className="border-2 shadow-lg hover:shadow-xl transition-all hover:scale-105 border-green-500/30 bg-green-50/50 dark:bg-green-950/20">
          <CardHeader className="border-b-2 border-dashed pb-3">
            <div className="flex items-center justify-between">
              <CardDescription className="text-sm font-medium text-green-700 dark:text-green-400">Most Helpful</CardDescription>
              <div className="p-1.5 bg-green-500/20 rounded-md">
                <ThumbsUp className="h-4 w-4 text-green-600" />
              </div>
            </div>
          </CardHeader>
          <CardContent className="pt-4">
            <CardTitle className="text-3xl text-green-600">{mostHelpfulArticle?.helpful || 0}</CardTitle>
          </CardContent>
        </Card>
      </div>

      {/* Main Layout: Sidebar + Content */}
      <div className="flex gap-6">
        {/* Category Sidebar - Fixed Width */}
        <div className="w-[280px] flex-shrink-0">{renderCategorySidebar()}</div>

        {/* Main Content Area */}
        <div className="flex-1 space-y-4">
          {/* Search and Filters Toolbar */}
          <Card className="border-2 shadow-lg">
            <CardContent className="pt-6">
              <div className="flex flex-col gap-4">
                {/* Primary Search Bar */}
                <div className="flex items-center gap-2">
                  <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-muted-foreground" />
                    <Input
                      placeholder="Search articles by title, content, or tags..."
                      value={search}
                      onChange={(e) => setSearch(e.target.value)}
                      onKeyDown={(e) => e.key === 'Enter' && handleSearch()}
                      className="pl-9"
                    />
                  </div>
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={() => setShowFilters(!showFilters)}
                    className={showFilters ? 'bg-muted' : ''}
                  >
                    <Filter className="w-4 h-4" />
                  </Button>
                  {hasActiveFilters && (
                    <Button variant="ghost" size="sm" onClick={handleClearFilters}>
                      <X className="w-4 h-4 mr-2" />
                      Clear
                    </Button>
                  )}
                </div>

                {/* Advanced Filters (Collapsible) */}
                {showFilters && (
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-3 pt-2 border-t">
                    <Select
                      value={visibilityFilter || 'all'}
                      onValueChange={(value) => setVisibilityFilter(value === 'all' ? '' : value)}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder="Visibility" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Visibility</SelectItem>
                        <SelectItem value="internal">Internal Only</SelectItem>
                        <SelectItem value="public">Public Only</SelectItem>
                      </SelectContent>
                    </Select>

                    <Select value={tagsFilter[0] || 'all'} onValueChange={(value) => {
                      if (value === 'all') {
                        setTagsFilter([])
                      } else {
                        setTagsFilter([value])
                      }
                    }}>
                      <SelectTrigger>
                        <SelectValue placeholder="Filter by tag" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Tags</SelectItem>
                        {tags.slice(0, 20).map((tag) => (
                          <SelectItem key={tag.name} value={tag.name}>
                            {tag.name} ({tag.count})
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>

                    <Select value={sortBy} onValueChange={(value) => setSortBy(value as typeof sortBy)}>
                      <SelectTrigger>
                        <SelectValue placeholder="Sort by" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="newest">Newest First</SelectItem>
                        <SelectItem value="mostViewed">Most Viewed</SelectItem>
                        <SelectItem value="mostHelpful">Most Helpful</SelectItem>
                        <SelectItem value="titleAZ">Title (A-Z)</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                )}

                {/* Filter Summary and View Toggle */}
                <div className="flex items-center justify-between pt-2 border-t">
                  <span className="text-sm text-muted-foreground">
                    {hasActiveFilters
                      ? `Showing ${filteredCount} of ${totalArticles} articles`
                      : `${totalArticles} total articles`}
                  </span>

                  {/* View Toggle */}
                  <div className="flex items-center border rounded-md">
                    <Button
                      variant={viewMode === 'list' ? 'secondary' : 'ghost'}
                      size="sm"
                      onClick={() => handleViewModeChange('list')}
                      className="rounded-r-none"
                    >
                      <List className="w-4 h-4" />
                    </Button>
                    <Button
                      variant={viewMode === 'grid' ? 'secondary' : 'ghost'}
                      size="sm"
                      onClick={() => handleViewModeChange('grid')}
                      className="rounded-l-none"
                    >
                      <Grid className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Articles List or Grid */}
          {viewMode === 'list' ? renderListView() : renderGridView()}
        </div>
      </div>

      {/* Delete Confirmation Dialog */}
      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Delete Article</AlertDialogTitle>
            <AlertDialogDescription>
              Are you sure you want to delete this article? This action cannot be undone and will
              permanently remove the article and all associated data.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel onClick={() => setArticleToDelete(null)}>Cancel</AlertDialogCancel>
            <AlertDialogAction
              onClick={handleDeleteArticle}
              className="bg-red-600 hover:bg-red-700"
            >
              Delete
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  )
}
