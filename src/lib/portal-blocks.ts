import { PortalBlockType, BlockProps } from '@/lib/types'

/**
 * Block Category Definition
 */
export interface BlockCategory {
  id: string
  label: string
  icon: string
}

/**
 * Block Property Schema (for Inspector auto-generation)
 */
export interface BlockPropertySchema {
  key: string
  label: string
  type:
    | 'string'
    | 'number'
    | 'boolean'
    | 'select'
    | 'color'
    | 'image'
    | 'richtext'
    | 'spacing'
    | 'alignment'
    | 'array'
    | 'icon'
    | 'link'
    | 'datasource'
    | 'roles'
    | 'datetime'
    | 'service-catalog-select'    // Dynamic service catalog selector
    | 'form-template-select'      // Dynamic form template selector
    | 'api-endpoint-select'       // Predefined API endpoint selector
    | 'kb-category-select'        // KB category selector
  defaultValue?: any
  required?: boolean
  description?: string
  options?: Array<{ value: any; label: string }>
  min?: number
  max?: number
  step?: number
  showIf?: {
    property: string
    value: any
  }
  itemSchema?: Record<string, { label: string; type: string; defaultValue?: any; options?: Array<{ value: any; label: string }> }>
  blockType?: string  // Used for api-endpoint-select to filter endpoints by block type
}

/**
 * Block Definition
 */
export interface BlockDefinition {
  type: PortalBlockType
  category: string
  label: string
  description: string
  icon: string
  supportsChildren: boolean
  defaultProps: BlockProps
  propertySchema: BlockPropertySchema[]
}

/**
 * Block Categories
 */
export const BLOCK_CATEGORIES: BlockCategory[] = [
  { id: 'container', label: 'Containers', icon: 'Box' },
  { id: 'content', label: 'Content', icon: 'Type' },
  { id: 'data', label: 'Data', icon: 'Database' },
  { id: 'form', label: 'Forms', icon: 'FileText' },
  { id: 'widget', label: 'Widgets', icon: 'Puzzle' },
]

/**
 * All Block Definitions
 */
export const BLOCK_DEFINITIONS: Record<PortalBlockType, BlockDefinition> = {
  // ============================================
  // CONTAINERS
  // ============================================
  container: {
    type: 'container',
    category: 'container',
    label: 'Container',
    description: 'Flexible layout container for organizing content',
    icon: 'Box',
    supportsChildren: true,
    defaultProps: {
      layout: {
        display: 'flex',
        container: 'fixed',
        direction: 'column',
        wrap: 'nowrap',
        gap: 16,
        align: 'start',
        justify: 'start',
        alignContent: 'start',
      },
      dimensions: {
        width: 'auto',
        minWidth: 0,
        maxWidth: 'none',
        height: 'auto',
        minHeight: 0,
        maxHeight: 'none',
      },
      spacing: {
        paddingTop: 16,
        paddingRight: 16,
        paddingBottom: 16,
        paddingLeft: 16,
        marginTop: 0,
        marginRight: 0,
        marginBottom: 0,
        marginLeft: 0,
      },
      background: {
        color: 'transparent',
        imageUrl: '',
        imageSize: 'cover',
        imagePosition: 'center',
        imageAttachment: 'scroll',
        gradient: '',
      },
      border: {
        width: 0,
        style: 'solid',
        color: 'transparent',
        radiusTopLeft: 0,
        radiusTopRight: 0,
        radiusBottomLeft: 0,
        radiusBottomRight: 0,
      },
      effects: {
        shadow: 'none',
        backdropBlur: 0,
        opacity: 100,
      },
      position: {
        type: 'relative',
        zIndex: 0,
        overflow: 'visible',
      },
      responsive: {
        hideOnMobile: false,
        hideOnTablet: false,
        hideOnDesktop: false,
        mobilePadding: 16,
        mobileDirection: 'column',
      },
    },
    propertySchema: [
      // Layout & Flexbox
      {
        key: 'layout.display',
        label: 'Display Mode',
        type: 'select',
        options: [
          { value: 'flex', label: 'Flexbox' },
          { value: 'grid', label: 'Grid' },
          { value: 'block', label: 'Block' },
        ],
        defaultValue: 'flex',
      },
      {
        key: 'layout.container',
        label: 'Container Width',
        type: 'select',
        options: [
          { value: 'fixed', label: 'Fixed (1200px)' },
          { value: 'fluid', label: 'Fluid (90%)' },
          { value: 'full', label: 'Full Width' },
          { value: 'custom', label: 'Custom' },
        ],
        defaultValue: 'fixed',
      },
      {
        key: 'layout.direction',
        label: 'Flex Direction',
        type: 'select',
        options: [
          { value: 'row', label: 'Row (Horizontal)' },
          { value: 'row-reverse', label: 'Row Reverse' },
          { value: 'column', label: 'Column (Vertical)' },
          { value: 'column-reverse', label: 'Column Reverse' },
        ],
        defaultValue: 'column',
        showIf: { property: 'layout.display', value: 'flex' },
      },
      {
        key: 'layout.wrap',
        label: 'Flex Wrap',
        type: 'select',
        options: [
          { value: 'nowrap', label: 'No Wrap' },
          { value: 'wrap', label: 'Wrap' },
          { value: 'wrap-reverse', label: 'Wrap Reverse' },
        ],
        defaultValue: 'nowrap',
        showIf: { property: 'layout.display', value: 'flex' },
      },
      {
        key: 'layout.gap',
        label: 'Gap (px)',
        type: 'number',
        min: 0,
        max: 100,
        step: 4,
        defaultValue: 16,
      },
      {
        key: 'layout.align',
        label: 'Align Items',
        type: 'select',
        options: [
          { value: 'start', label: 'Start' },
          { value: 'center', label: 'Center' },
          { value: 'end', label: 'End' },
          { value: 'stretch', label: 'Stretch' },
          { value: 'baseline', label: 'Baseline' },
        ],
        defaultValue: 'start',
        showIf: { property: 'layout.display', value: 'flex' },
      },
      {
        key: 'layout.justify',
        label: 'Justify Content',
        type: 'select',
        options: [
          { value: 'start', label: 'Start' },
          { value: 'center', label: 'Center' },
          { value: 'end', label: 'End' },
          { value: 'between', label: 'Space Between' },
          { value: 'around', label: 'Space Around' },
          { value: 'evenly', label: 'Space Evenly' },
        ],
        defaultValue: 'start',
        showIf: { property: 'layout.display', value: 'flex' },
      },
      {
        key: 'layout.alignContent',
        label: 'Align Content',
        type: 'select',
        options: [
          { value: 'start', label: 'Start' },
          { value: 'center', label: 'Center' },
          { value: 'end', label: 'End' },
          { value: 'between', label: 'Space Between' },
          { value: 'around', label: 'Space Around' },
          { value: 'stretch', label: 'Stretch' },
        ],
        defaultValue: 'start',
        description: 'Aligns flex lines when there is extra space',
        showIf: { property: 'layout.wrap', value: 'wrap' },
      },

      // Dimensions
      {
        key: 'dimensions.width',
        label: 'Width',
        type: 'string',
        defaultValue: 'auto',
        description: 'CSS width (e.g., auto, 100%, 500px)',
      },
      {
        key: 'dimensions.minWidth',
        label: 'Min Width (px)',
        type: 'number',
        min: 0,
        max: 2000,
        step: 10,
        defaultValue: 0,
      },
      {
        key: 'dimensions.maxWidth',
        label: 'Max Width',
        type: 'string',
        defaultValue: 'none',
        description: 'CSS max-width (e.g., none, 100%, 1200px)',
      },
      {
        key: 'dimensions.height',
        label: 'Height',
        type: 'string',
        defaultValue: 'auto',
        description: 'CSS height (e.g., auto, 100vh, 400px)',
      },
      {
        key: 'dimensions.minHeight',
        label: 'Min Height (px)',
        type: 'number',
        min: 0,
        max: 2000,
        step: 10,
        defaultValue: 0,
      },
      {
        key: 'dimensions.maxHeight',
        label: 'Max Height',
        type: 'string',
        defaultValue: 'none',
        description: 'CSS max-height (e.g., none, 100vh, 800px)',
      },

      // Spacing - Padding
      {
        key: 'spacing.paddingTop',
        label: 'Padding Top (px)',
        type: 'number',
        min: 0,
        max: 200,
        step: 4,
        defaultValue: 16,
      },
      {
        key: 'spacing.paddingRight',
        label: 'Padding Right (px)',
        type: 'number',
        min: 0,
        max: 200,
        step: 4,
        defaultValue: 16,
      },
      {
        key: 'spacing.paddingBottom',
        label: 'Padding Bottom (px)',
        type: 'number',
        min: 0,
        max: 200,
        step: 4,
        defaultValue: 16,
      },
      {
        key: 'spacing.paddingLeft',
        label: 'Padding Left (px)',
        type: 'number',
        min: 0,
        max: 200,
        step: 4,
        defaultValue: 16,
      },

      // Spacing - Margin
      {
        key: 'spacing.marginTop',
        label: 'Margin Top (px)',
        type: 'number',
        min: -100,
        max: 200,
        step: 4,
        defaultValue: 0,
      },
      {
        key: 'spacing.marginRight',
        label: 'Margin Right (px)',
        type: 'number',
        min: -100,
        max: 200,
        step: 4,
        defaultValue: 0,
      },
      {
        key: 'spacing.marginBottom',
        label: 'Margin Bottom (px)',
        type: 'number',
        min: -100,
        max: 200,
        step: 4,
        defaultValue: 0,
      },
      {
        key: 'spacing.marginLeft',
        label: 'Margin Left (px)',
        type: 'number',
        min: -100,
        max: 200,
        step: 4,
        defaultValue: 0,
      },

      // Background
      {
        key: 'background.color',
        label: 'Background Color',
        type: 'color',
        defaultValue: 'transparent',
      },
      {
        key: 'background.imageUrl',
        label: 'Background Image URL',
        type: 'string',
        defaultValue: '',
      },
      {
        key: 'background.imageSize',
        label: 'Background Size',
        type: 'select',
        options: [
          { value: 'auto', label: 'Auto' },
          { value: 'cover', label: 'Cover' },
          { value: 'contain', label: 'Contain' },
          { value: '100% 100%', label: 'Stretch' },
        ],
        defaultValue: 'cover',
        showIf: { property: 'background.imageUrl', value: (val: string) => !!val },
      },
      {
        key: 'background.imagePosition',
        label: 'Background Position',
        type: 'select',
        options: [
          { value: 'center', label: 'Center' },
          { value: 'top', label: 'Top' },
          { value: 'bottom', label: 'Bottom' },
          { value: 'left', label: 'Left' },
          { value: 'right', label: 'Right' },
          { value: 'top left', label: 'Top Left' },
          { value: 'top right', label: 'Top Right' },
          { value: 'bottom left', label: 'Bottom Left' },
          { value: 'bottom right', label: 'Bottom Right' },
        ],
        defaultValue: 'center',
        showIf: { property: 'background.imageUrl', value: (val: string) => !!val },
      },
      {
        key: 'background.imageAttachment',
        label: 'Background Attachment',
        type: 'select',
        options: [
          { value: 'scroll', label: 'Scroll' },
          { value: 'fixed', label: 'Fixed (Parallax)' },
        ],
        defaultValue: 'scroll',
        showIf: { property: 'background.imageUrl', value: (val: string) => !!val },
      },
      {
        key: 'background.gradient',
        label: 'Background Gradient',
        type: 'string',
        defaultValue: '',
        description: 'CSS gradient (e.g., linear-gradient(to right, #000, #fff))',
      },

      // Border
      {
        key: 'border.width',
        label: 'Border Width (px)',
        type: 'number',
        min: 0,
        max: 10,
        step: 1,
        defaultValue: 0,
      },
      {
        key: 'border.style',
        label: 'Border Style',
        type: 'select',
        options: [
          { value: 'solid', label: 'Solid' },
          { value: 'dashed', label: 'Dashed' },
          { value: 'dotted', label: 'Dotted' },
          { value: 'double', label: 'Double' },
          { value: 'groove', label: 'Groove' },
          { value: 'ridge', label: 'Ridge' },
        ],
        defaultValue: 'solid',
        showIf: { property: 'border.width', value: (val: number) => val > 0 },
      },
      {
        key: 'border.color',
        label: 'Border Color',
        type: 'color',
        defaultValue: 'transparent',
        showIf: { property: 'border.width', value: (val: number) => val > 0 },
      },
      {
        key: 'border.radiusTopLeft',
        label: 'Border Radius Top-Left (px)',
        type: 'number',
        min: 0,
        max: 100,
        step: 2,
        defaultValue: 0,
      },
      {
        key: 'border.radiusTopRight',
        label: 'Border Radius Top-Right (px)',
        type: 'number',
        min: 0,
        max: 100,
        step: 2,
        defaultValue: 0,
      },
      {
        key: 'border.radiusBottomLeft',
        label: 'Border Radius Bottom-Left (px)',
        type: 'number',
        min: 0,
        max: 100,
        step: 2,
        defaultValue: 0,
      },
      {
        key: 'border.radiusBottomRight',
        label: 'Border Radius Bottom-Right (px)',
        type: 'number',
        min: 0,
        max: 100,
        step: 2,
        defaultValue: 0,
      },

      // Effects
      {
        key: 'effects.shadow',
        label: 'Box Shadow',
        type: 'select',
        options: [
          { value: 'none', label: 'None' },
          { value: 'sm', label: 'Small' },
          { value: 'md', label: 'Medium' },
          { value: 'lg', label: 'Large' },
          { value: 'xl', label: 'Extra Large' },
          { value: 'inner', label: 'Inner Shadow' },
        ],
        defaultValue: 'none',
      },
      {
        key: 'effects.backdropBlur',
        label: 'Backdrop Blur (px)',
        type: 'number',
        min: 0,
        max: 20,
        step: 2,
        defaultValue: 0,
        description: 'Blur background behind container',
      },
      {
        key: 'effects.opacity',
        label: 'Opacity (%)',
        type: 'number',
        min: 0,
        max: 100,
        step: 5,
        defaultValue: 100,
      },

      // Position
      {
        key: 'position.type',
        label: 'Position Type',
        type: 'select',
        options: [
          { value: 'relative', label: 'Relative' },
          { value: 'absolute', label: 'Absolute' },
          { value: 'fixed', label: 'Fixed' },
          { value: 'sticky', label: 'Sticky' },
        ],
        defaultValue: 'relative',
      },
      {
        key: 'position.zIndex',
        label: 'Z-Index',
        type: 'number',
        min: -10,
        max: 100,
        step: 1,
        defaultValue: 0,
        description: 'Stacking order of the container',
      },
      {
        key: 'position.overflow',
        label: 'Overflow',
        type: 'select',
        options: [
          { value: 'visible', label: 'Visible' },
          { value: 'hidden', label: 'Hidden' },
          { value: 'scroll', label: 'Scroll' },
          { value: 'auto', label: 'Auto' },
        ],
        defaultValue: 'visible',
      },

      // Responsive
      {
        key: 'responsive.hideOnMobile',
        label: 'Hide on Mobile',
        type: 'boolean',
        defaultValue: false,
        description: 'Hide this container on mobile devices',
      },
      {
        key: 'responsive.hideOnTablet',
        label: 'Hide on Tablet',
        type: 'boolean',
        defaultValue: false,
        description: 'Hide this container on tablet devices',
      },
      {
        key: 'responsive.hideOnDesktop',
        label: 'Hide on Desktop',
        type: 'boolean',
        defaultValue: false,
        description: 'Hide this container on desktop devices',
      },
      {
        key: 'responsive.mobilePadding',
        label: 'Mobile Padding (px)',
        type: 'number',
        min: 0,
        max: 100,
        step: 4,
        defaultValue: 16,
        description: 'Override padding on mobile devices',
      },
      {
        key: 'responsive.mobileDirection',
        label: 'Mobile Flex Direction',
        type: 'select',
        options: [
          { value: 'row', label: 'Row (Horizontal)' },
          { value: 'column', label: 'Column (Vertical)' },
        ],
        defaultValue: 'column',
        description: 'Override flex direction on mobile',
      },
    ],
  },

  hero: {
    type: 'hero',
    category: 'container',
    label: 'Hero Section',
    description: 'Large hero banner with image and text',
    icon: 'Image',
    supportsChildren: false,
    defaultProps: {
      text: {
        content: 'Welcome to Our Portal',
        subtitle: '',
        level: 1,
        align: 'center',
      },
      image: {
        src: '',
        alt: 'Hero image',
        height: 400,
        objectFit: 'cover',
      },
      video: {
        enabled: false,
        src: '',
        muted: true,
        loop: true,
      },
      overlay: {
        enabled: true,
        color: 'rgba(0,0,0,0.5)',
        opacity: 50,
      },
      cta: {
        primaryText: '',
        primaryHref: '',
        primaryVariant: 'default',
        secondaryText: '',
        secondaryHref: '',
        secondaryVariant: 'outline',
      },
      style: {
        textShadow: 'none',
      },
      layout: {
        padding: 8,
      },
    },
    propertySchema: [
      {
        key: 'text.content',
        label: 'Heading',
        type: 'string',
        required: true,
        defaultValue: 'Welcome to Our Portal',
      },
      {
        key: 'text.subtitle',
        label: 'Subtitle',
        type: 'string',
        defaultValue: '',
      },
      {
        key: 'image.src',
        label: 'Background Image',
        type: 'image',
        defaultValue: '',
      },
      {
        key: 'image.height',
        label: 'Height (px)',
        type: 'number',
        min: 200,
        max: 800,
        step: 50,
        defaultValue: 400,
      },
      {
        key: 'video.enabled',
        label: 'Enable Video Background',
        type: 'boolean',
        defaultValue: false,
      },
      {
        key: 'video.src',
        label: 'Video URL',
        type: 'string',
        defaultValue: '',
        showIf: { property: 'video.enabled', value: true },
      },
      {
        key: 'video.muted',
        label: 'Mute Video',
        type: 'boolean',
        defaultValue: true,
        showIf: { property: 'video.enabled', value: true },
      },
      {
        key: 'video.loop',
        label: 'Loop Video',
        type: 'boolean',
        defaultValue: true,
        showIf: { property: 'video.enabled', value: true },
      },
      {
        key: 'overlay.enabled',
        label: 'Enable Overlay',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'overlay.color',
        label: 'Overlay Color',
        type: 'color',
        defaultValue: 'rgba(0,0,0,0.5)',
        showIf: { property: 'overlay.enabled', value: true },
      },
      {
        key: 'overlay.opacity',
        label: 'Overlay Opacity (%)',
        type: 'number',
        min: 0,
        max: 100,
        step: 5,
        defaultValue: 50,
        showIf: { property: 'overlay.enabled', value: true },
      },
      {
        key: 'text.align',
        label: 'Text Alignment',
        type: 'select',
        options: [
          { value: 'left', label: 'Left' },
          { value: 'center', label: 'Center' },
          { value: 'right', label: 'Right' },
        ],
        defaultValue: 'center',
      },
      {
        key: 'style.textShadow',
        label: 'Text Shadow',
        type: 'select',
        options: [
          { value: 'none', label: 'None' },
          { value: '1px 1px 2px rgba(0,0,0,0.5)', label: 'Light' },
          { value: '2px 2px 4px rgba(0,0,0,0.7)', label: 'Medium' },
          { value: '3px 3px 6px rgba(0,0,0,0.9)', label: 'Strong' },
        ],
        defaultValue: 'none',
      },
      {
        key: 'cta.primaryText',
        label: 'Primary Button Text',
        type: 'string',
        defaultValue: '',
      },
      {
        key: 'cta.primaryHref',
        label: 'Primary Button URL',
        type: 'string',
        defaultValue: '',
        showIf: { property: 'cta.primaryText', value: '' },
      },
      {
        key: 'cta.primaryVariant',
        label: 'Primary Button Style',
        type: 'select',
        options: [
          { value: 'default', label: 'Default' },
          { value: 'primary', label: 'Primary' },
          { value: 'secondary', label: 'Secondary' },
        ],
        defaultValue: 'default',
      },
      {
        key: 'cta.secondaryText',
        label: 'Secondary Button Text',
        type: 'string',
        defaultValue: '',
      },
      {
        key: 'cta.secondaryHref',
        label: 'Secondary Button URL',
        type: 'string',
        defaultValue: '',
      },
      {
        key: 'cta.secondaryVariant',
        label: 'Secondary Button Style',
        type: 'select',
        options: [
          { value: 'outline', label: 'Outline' },
          { value: 'ghost', label: 'Ghost' },
          { value: 'secondary', label: 'Secondary' },
        ],
        defaultValue: 'outline',
      },
    ],
  },

  card: {
    type: 'card',
    category: 'container',
    label: 'Card',
    description: 'Card container with optional image and actions',
    icon: 'CreditCard',
    supportsChildren: true,
    defaultProps: {
      card: {
        title: 'Card Title',
        description: 'Card description goes here',
        variant: 'default',
        badge: {
          text: '',
          variant: 'default',
        },
        footer: {
          showFooter: false,
          leftText: '',
          rightText: '',
        },
      },
      image: {
        src: '',
        position: 'top',
        overlay: false,
        overlayOpacity: 40,
      },
      interaction: {
        linkType: 'none',
        href: '',
        serviceCatalogId: '',
        openInNewTab: false,
        onClick: '',
        hoverEffect: 'lift',
      },
      layout: {
        padding: 4,
      },
    },
    propertySchema: [
      {
        key: 'card.title',
        label: 'Title',
        type: 'string',
        defaultValue: 'Card Title',
      },
      {
        key: 'card.description',
        label: 'Description',
        type: 'string',
        defaultValue: 'Card description',
      },
      {
        key: 'card.badge.text',
        label: 'Badge Text',
        type: 'string',
        defaultValue: '',
      },
      {
        key: 'card.badge.variant',
        label: 'Badge Variant',
        type: 'select',
        options: [
          { value: 'default', label: 'Default' },
          { value: 'success', label: 'Success' },
          { value: 'warning', label: 'Warning' },
          { value: 'error', label: 'Error' },
          { value: 'info', label: 'Info' },
        ],
        defaultValue: 'default',
        showIf: { property: 'card.badge.text', value: '' },
      },
      {
        key: 'image.src',
        label: 'Image URL',
        type: 'image',
        defaultValue: '',
      },
      {
        key: 'image.position',
        label: 'Image Position',
        type: 'select',
        options: [
          { value: 'top', label: 'Top' },
          { value: 'bottom', label: 'Bottom' },
          { value: 'background', label: 'Background' },
        ],
        defaultValue: 'top',
        showIf: { property: 'image.src', value: '' },
      },
      {
        key: 'image.overlay',
        label: 'Enable Image Overlay',
        type: 'boolean',
        defaultValue: false,
        showIf: { property: 'image.position', value: 'background' },
      },
      {
        key: 'image.overlayOpacity',
        label: 'Overlay Opacity (%)',
        type: 'number',
        min: 0,
        max: 100,
        step: 5,
        defaultValue: 40,
        showIf: { property: 'image.overlay', value: true },
      },
      {
        key: 'card.variant',
        label: 'Card Variant',
        type: 'select',
        options: [
          { value: 'default', label: 'Default' },
          { value: 'bordered', label: 'Bordered' },
          { value: 'elevated', label: 'Elevated' },
        ],
        defaultValue: 'default',
      },
      {
        key: 'interaction.hoverEffect',
        label: 'Hover Effect',
        type: 'select',
        options: [
          { value: 'none', label: 'None' },
          { value: 'lift', label: 'Lift' },
          { value: 'scale', label: 'Scale' },
          { value: 'glow', label: 'Glow' },
        ],
        defaultValue: 'lift',
      },
      {
        key: 'interaction.linkType',
        label: 'Link Type',
        type: 'select',
        options: [
          { value: 'none', label: 'None' },
          { value: 'url', label: 'Custom URL' },
          { value: 'service-catalog', label: 'Service Catalog Item' },
        ],
        defaultValue: 'none',
        description: 'Choose how this card should link',
      },
      {
        key: 'interaction.href',
        label: 'Link URL',
        type: 'string',
        defaultValue: '',
        showIf: { property: 'interaction.linkType', value: 'url' },
      },
      {
        key: 'interaction.serviceCatalogId',
        label: 'Service Catalog Item',
        type: 'service-catalog-select',
        defaultValue: '',
        description: 'Select a service catalog item to link to',
        showIf: { property: 'interaction.linkType', value: 'service-catalog' },
      },
      {
        key: 'interaction.openInNewTab',
        label: 'Open in New Tab',
        type: 'boolean',
        defaultValue: false,
        showIf: { property: 'interaction.linkType', value: ['url', 'service-catalog'] },
      },
      {
        key: 'interaction.onClick',
        label: 'Click Action',
        type: 'select',
        options: [
          { value: '', label: 'None' },
          { value: 'openModal', label: 'Open Modal' },
          { value: 'expandCard', label: 'Expand Card' },
        ],
        defaultValue: '',
      },
      {
        key: 'card.footer.showFooter',
        label: 'Show Footer',
        type: 'boolean',
        defaultValue: false,
      },
      {
        key: 'card.footer.leftText',
        label: 'Footer Left Text',
        type: 'string',
        defaultValue: '',
        showIf: { property: 'card.footer.showFooter', value: true },
      },
      {
        key: 'card.footer.rightText',
        label: 'Footer Right Text',
        type: 'string',
        defaultValue: '',
        showIf: { property: 'card.footer.showFooter', value: true },
      },
    ],
  },

  'card-grid': {
    type: 'card-grid',
    category: 'container',
    label: 'Card Grid',
    description: 'Grid layout for multiple cards',
    icon: 'Grid3x3',
    supportsChildren: true,
    defaultProps: {
      grid: {
        columns: 3,
        responsiveColumns: {
          mobile: 1,
          tablet: 2,
          desktop: 3,
        },
        layoutMode: 'fixed',
        autoFit: false,
        minCardWidth: 280,
        maxCardWidth: 400,
        equalHeight: true,
        alignment: 'start',
        justifyContent: 'start',
      },
      spacing: {
        columnGap: 24,
        rowGap: 24,
        containerPadding: 0,
        cardPadding: 24,
      },
      style: {
        variant: 'bordered',
        borderRadius: 12,
        shadowDepth: 'sm',
        borderWidth: 1,
        borderColor: 'border',
      },
      hover: {
        enabled: true,
        effect: 'lift',
        scale: 1.02,
        shadowIncrease: true,
        borderColorChange: false,
        transitionDuration: 200,
      },
      animation: {
        enabled: true,
        entrance: 'fade-up',
        stagger: true,
        staggerDelay: 50,
      },
      responsive: {
        stackOnMobile: true,
        centerOnMobile: true,
        reduceGapOnMobile: true,
        mobileGap: 16,
      },
    },
    propertySchema: [
      // Grid Layout
      {
        key: 'grid.columns',
        label: 'Desktop Columns',
        type: 'select',
        options: [
          { value: 1, label: '1 Column' },
          { value: 2, label: '2 Columns' },
          { value: 3, label: '3 Columns' },
          { value: 4, label: '4 Columns' },
          { value: 5, label: '5 Columns' },
          { value: 6, label: '6 Columns' },
        ],
        defaultValue: 3,
      },
      {
        key: 'grid.responsiveColumns.tablet',
        label: 'Tablet Columns',
        type: 'select',
        options: [
          { value: 1, label: '1 Column' },
          { value: 2, label: '2 Columns' },
          { value: 3, label: '3 Columns' },
          { value: 4, label: '4 Columns' },
        ],
        defaultValue: 2,
      },
      {
        key: 'grid.responsiveColumns.mobile',
        label: 'Mobile Columns',
        type: 'select',
        options: [
          { value: 1, label: '1 Column' },
          { value: 2, label: '2 Columns' },
        ],
        defaultValue: 1,
      },
      {
        key: 'grid.layoutMode',
        label: 'Layout Mode',
        type: 'select',
        options: [
          { value: 'fixed', label: 'Fixed Columns' },
          { value: 'masonry', label: 'Masonry (Pinterest-style)' },
          { value: 'auto', label: 'Auto-fit' },
        ],
        defaultValue: 'fixed',
        description: 'How cards are arranged in the grid',
      },
      {
        key: 'grid.minCardWidth',
        label: 'Min Card Width (px)',
        type: 'number',
        min: 200,
        max: 600,
        step: 20,
        defaultValue: 280,
        showIf: { property: 'grid.layoutMode', value: 'auto' },
      },
      {
        key: 'grid.maxCardWidth',
        label: 'Max Card Width (px)',
        type: 'number',
        min: 300,
        max: 800,
        step: 20,
        defaultValue: 400,
        showIf: { property: 'grid.layoutMode', value: 'auto' },
      },
      {
        key: 'grid.equalHeight',
        label: 'Equal Height Cards',
        type: 'boolean',
        defaultValue: true,
        description: 'Make all cards the same height',
      },
      {
        key: 'grid.alignment',
        label: 'Vertical Alignment',
        type: 'select',
        options: [
          { value: 'start', label: 'Top' },
          { value: 'center', label: 'Center' },
          { value: 'end', label: 'Bottom' },
          { value: 'stretch', label: 'Stretch' },
        ],
        defaultValue: 'start',
      },
      {
        key: 'grid.justifyContent',
        label: 'Horizontal Alignment',
        type: 'select',
        options: [
          { value: 'start', label: 'Left' },
          { value: 'center', label: 'Center' },
          { value: 'end', label: 'Right' },
          { value: 'space-between', label: 'Space Between' },
          { value: 'space-around', label: 'Space Around' },
          { value: 'space-evenly', label: 'Space Evenly' },
        ],
        defaultValue: 'start',
      },

      // Spacing
      {
        key: 'spacing.columnGap',
        label: 'Column Gap (px)',
        type: 'number',
        min: 0,
        max: 80,
        step: 4,
        defaultValue: 24,
      },
      {
        key: 'spacing.rowGap',
        label: 'Row Gap (px)',
        type: 'number',
        min: 0,
        max: 80,
        step: 4,
        defaultValue: 24,
      },
      {
        key: 'spacing.containerPadding',
        label: 'Container Padding (px)',
        type: 'number',
        min: 0,
        max: 80,
        step: 4,
        defaultValue: 0,
      },
      {
        key: 'spacing.cardPadding',
        label: 'Card Padding (px)',
        type: 'number',
        min: 0,
        max: 60,
        step: 4,
        defaultValue: 24,
      },

      // Card Style
      {
        key: 'style.variant',
        label: 'Card Variant',
        type: 'select',
        options: [
          { value: 'bordered', label: 'Bordered' },
          { value: 'elevated', label: 'Elevated (Shadow)' },
          { value: 'flat', label: 'Flat (No border)' },
          { value: 'outlined', label: 'Outlined' },
          { value: 'ghost', label: 'Ghost (Transparent)' },
        ],
        defaultValue: 'bordered',
      },
      {
        key: 'style.borderRadius',
        label: 'Border Radius (px)',
        type: 'number',
        min: 0,
        max: 32,
        step: 2,
        defaultValue: 12,
      },
      {
        key: 'style.shadowDepth',
        label: 'Shadow Depth',
        type: 'select',
        options: [
          { value: 'none', label: 'None' },
          { value: 'xs', label: 'Extra Small' },
          { value: 'sm', label: 'Small' },
          { value: 'md', label: 'Medium' },
          { value: 'lg', label: 'Large' },
          { value: 'xl', label: 'Extra Large' },
        ],
        defaultValue: 'sm',
        showIf: { property: 'style.variant', value: 'elevated' },
      },
      {
        key: 'style.borderWidth',
        label: 'Border Width (px)',
        type: 'number',
        min: 0,
        max: 4,
        step: 1,
        defaultValue: 1,
      },
      {
        key: 'style.borderColor',
        label: 'Border Color',
        type: 'select',
        options: [
          { value: 'border', label: 'Default Border' },
          { value: 'primary', label: 'Primary' },
          { value: 'secondary', label: 'Secondary' },
          { value: 'accent', label: 'Accent' },
          { value: 'muted', label: 'Muted' },
        ],
        defaultValue: 'border',
      },

      // Hover Effects
      {
        key: 'hover.enabled',
        label: 'Enable Hover Effects',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'hover.effect',
        label: 'Hover Effect',
        type: 'select',
        options: [
          { value: 'lift', label: 'Lift Up' },
          { value: 'scale', label: 'Scale' },
          { value: 'glow', label: 'Glow' },
          { value: 'border', label: 'Border Highlight' },
          { value: 'none', label: 'None' },
        ],
        defaultValue: 'lift',
        showIf: { property: 'hover.enabled', value: true },
      },
      {
        key: 'hover.scale',
        label: 'Hover Scale',
        type: 'number',
        min: 1.0,
        max: 1.1,
        step: 0.01,
        defaultValue: 1.02,
        showIf: { property: 'hover.effect', value: 'scale' },
      },
      {
        key: 'hover.shadowIncrease',
        label: 'Increase Shadow on Hover',
        type: 'boolean',
        defaultValue: true,
        showIf: { property: 'hover.enabled', value: true },
      },
      {
        key: 'hover.transitionDuration',
        label: 'Transition Duration (ms)',
        type: 'number',
        min: 100,
        max: 500,
        step: 50,
        defaultValue: 200,
        showIf: { property: 'hover.enabled', value: true },
      },

      // Animations
      {
        key: 'animation.enabled',
        label: 'Enable Entrance Animations',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'animation.entrance',
        label: 'Entrance Effect',
        type: 'select',
        options: [
          { value: 'fade', label: 'Fade In' },
          { value: 'fade-up', label: 'Fade Up' },
          { value: 'fade-down', label: 'Fade Down' },
          { value: 'slide-left', label: 'Slide from Left' },
          { value: 'slide-right', label: 'Slide from Right' },
          { value: 'zoom', label: 'Zoom In' },
        ],
        defaultValue: 'fade-up',
        showIf: { property: 'animation.enabled', value: true },
      },
      {
        key: 'animation.stagger',
        label: 'Stagger Animation',
        type: 'boolean',
        defaultValue: true,
        description: 'Animate cards one by one',
        showIf: { property: 'animation.enabled', value: true },
      },
      {
        key: 'animation.staggerDelay',
        label: 'Stagger Delay (ms)',
        type: 'number',
        min: 25,
        max: 200,
        step: 25,
        defaultValue: 50,
        showIf: { property: 'animation.stagger', value: true },
      },

      // Responsive Behavior
      {
        key: 'responsive.stackOnMobile',
        label: 'Stack Cards on Mobile',
        type: 'boolean',
        defaultValue: true,
        description: 'Force single column on mobile',
      },
      {
        key: 'responsive.centerOnMobile',
        label: 'Center Cards on Mobile',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'responsive.reduceGapOnMobile',
        label: 'Reduce Gap on Mobile',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'responsive.mobileGap',
        label: 'Mobile Gap (px)',
        type: 'number',
        min: 8,
        max: 40,
        step: 4,
        defaultValue: 16,
        showIf: { property: 'responsive.reduceGapOnMobile', value: true },
      },
    ],
  },

  tabs: {
    type: 'tabs',
    category: 'container',
    label: 'Tabs',
    description: 'Tabbed content sections - drag blocks into each tab',
    icon: 'Layers',
    supportsChildren: true,
    defaultProps: {
      items: [
        {
          label: 'Getting Started',
          icon: 'Play',
          badge: '',
          children: [],
        },
        {
          label: 'Resources',
          icon: 'BookOpen',
          badge: '',
          children: [],
        },
        {
          label: 'Support',
          icon: 'HelpCircle',
          badge: 'New',
          children: [],
        },
      ],
      display: {
        defaultTab: 0,
        orientation: 'horizontal',
        variant: 'underline',
        alignment: 'start',
        fullWidth: false,
      },
      style: {
        tabSpacing: 'comfortable',
        activeColor: 'primary',
        inactiveColor: 'muted',
        showIcons: true,
        showBadges: true,
      },
      animation: {
        enabled: true,
        transition: 'fade',
        duration: 200,
      },
      interaction: {
        persist: false,
        urlHash: false,
        keyboard: true,
      },
    },
    propertySchema: [
      {
        key: 'items',
        label: 'Tab Items',
        type: 'array',
        description: 'Configure individual tabs (drag blocks into each tab to add content)',
        itemSchema: {
          label: { label: 'Tab Label', type: 'string', defaultValue: 'Tab' },
          icon: { label: 'Icon (Lucide name)', type: 'string', defaultValue: '' },
          badge: { label: 'Badge Text', type: 'string', defaultValue: '' },
        },
      },
      {
        key: 'display.defaultTab',
        label: 'Default Active Tab',
        type: 'number',
        min: 0,
        max: 10,
        step: 1,
        defaultValue: 0,
        description: 'Index of the tab to show by default (0 = first tab)',
      },
      {
        key: 'display.orientation',
        label: 'Orientation',
        type: 'select',
        options: [
          { value: 'horizontal', label: 'Horizontal' },
          { value: 'vertical', label: 'Vertical' },
        ],
        defaultValue: 'horizontal',
      },
      {
        key: 'display.variant',
        label: 'Tab Style',
        type: 'select',
        options: [
          { value: 'underline', label: 'Underline' },
          { value: 'pills', label: 'Pills' },
          { value: 'bordered', label: 'Bordered' },
          { value: 'enclosed', label: 'Enclosed' },
        ],
        defaultValue: 'underline',
      },
      {
        key: 'display.alignment',
        label: 'Tab Alignment',
        type: 'select',
        options: [
          { value: 'start', label: 'Start' },
          { value: 'center', label: 'Center' },
          { value: 'end', label: 'End' },
          { value: 'between', label: 'Space Between' },
        ],
        defaultValue: 'start',
      },
      {
        key: 'display.fullWidth',
        label: 'Full Width Tabs',
        type: 'boolean',
        defaultValue: false,
        description: 'Make each tab take equal width',
      },
      {
        key: 'style.tabSpacing',
        label: 'Tab Spacing',
        type: 'select',
        options: [
          { value: 'compact', label: 'Compact' },
          { value: 'comfortable', label: 'Comfortable' },
          { value: 'spacious', label: 'Spacious' },
        ],
        defaultValue: 'comfortable',
      },
      {
        key: 'style.activeColor',
        label: 'Active Tab Color',
        type: 'select',
        options: [
          { value: 'primary', label: 'Primary' },
          { value: 'secondary', label: 'Secondary' },
          { value: 'accent', label: 'Accent' },
        ],
        defaultValue: 'primary',
      },
      {
        key: 'style.showIcons',
        label: 'Show Icons',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'style.showBadges',
        label: 'Show Badges',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'animation.enabled',
        label: 'Enable Animations',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'animation.transition',
        label: 'Transition Effect',
        type: 'select',
        options: [
          { value: 'fade', label: 'Fade' },
          { value: 'slide', label: 'Slide' },
          { value: 'scale', label: 'Scale' },
        ],
        defaultValue: 'fade',
        showIf: { property: 'animation.enabled', value: true },
      },
      {
        key: 'interaction.persist',
        label: 'Remember Active Tab',
        type: 'boolean',
        defaultValue: false,
        description: 'Save active tab in browser storage',
      },
      {
        key: 'interaction.urlHash',
        label: 'Update URL Hash',
        type: 'boolean',
        defaultValue: false,
        description: 'Update browser URL with active tab',
      },
    ],
  },

  accordion: {
    type: 'accordion',
    category: 'container',
    label: 'Accordion',
    description: 'Collapsible content sections',
    icon: 'ChevronDown',
    supportsChildren: false,
    defaultProps: {
      items: [
        {
          title: 'Getting Started with the Portal',
          content: '<p>Welcome to the portal! Here you can access all your IT services, submit tickets, and find helpful resources.</p>',
          icon: 'Play',
          defaultOpen: true,
        },
        {
          title: 'How to Submit a Ticket',
          content: '<p>Click on "New Ticket" in the main menu, fill out the form with your issue details, and our support team will respond within 24 hours.</p>',
          icon: 'Ticket',
          defaultOpen: false,
        },
        {
          title: 'Frequently Asked Questions',
          content: '<p>Browse our FAQ section for answers to common questions about passwords, access, software requests, and more.</p>',
          icon: 'HelpCircle',
          defaultOpen: false,
        },
      ],
      display: {
        allowMultiple: false,
        variant: 'bordered',
        spacing: 'comfortable',
        showIcons: true,
        iconPosition: 'left',
      },
      style: {
        expandIcon: 'chevron',
        headerAlign: 'left',
        headerPadding: 'comfortable',
        contentPadding: 'comfortable',
        borderWidth: 1,
        borderRadius: 8,
      },
      animation: {
        enabled: true,
        duration: 200,
        easing: 'ease-in-out',
      },
      interaction: {
        persist: false,
        urlHash: false,
        closeOthers: true,
      },
      colors: {
        headerBg: 'default',
        headerText: 'default',
        contentBg: 'default',
        borderColor: 'border',
      },
    },
    propertySchema: [
      {
        key: 'items',
        label: 'Accordion Items',
        type: 'array',
        description: 'Configure individual accordion sections',
        itemSchema: {
          title: { label: 'Section Title', type: 'string', defaultValue: 'Section Title' },
          content: { label: 'Section Content', type: 'textarea', defaultValue: '' },
          icon: { label: 'Icon (Lucide name)', type: 'string', defaultValue: '' },
          defaultOpen: { label: 'Open by Default', type: 'boolean', defaultValue: false },
        },
      },
      {
        key: 'display.allowMultiple',
        label: 'Allow Multiple Open',
        type: 'boolean',
        defaultValue: false,
        description: 'Allow multiple sections to be open at once',
      },
      {
        key: 'display.variant',
        label: 'Style Variant',
        type: 'select',
        options: [
          { value: 'default', label: 'Default' },
          { value: 'bordered', label: 'Bordered' },
          { value: 'separated', label: 'Separated' },
          { value: 'contained', label: 'Contained' },
        ],
        defaultValue: 'bordered',
      },
      {
        key: 'display.spacing',
        label: 'Item Spacing',
        type: 'select',
        options: [
          { value: 'compact', label: 'Compact' },
          { value: 'comfortable', label: 'Comfortable' },
          { value: 'spacious', label: 'Spacious' },
        ],
        defaultValue: 'comfortable',
      },
      {
        key: 'display.showIcons',
        label: 'Show Item Icons',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'display.iconPosition',
        label: 'Icon Position',
        type: 'select',
        options: [
          { value: 'left', label: 'Left' },
          { value: 'right', label: 'Right' },
        ],
        defaultValue: 'left',
        showIf: { property: 'display.showIcons', value: true },
      },
      {
        key: 'style.expandIcon',
        label: 'Expand/Collapse Icon',
        type: 'select',
        options: [
          { value: 'chevron', label: 'Chevron' },
          { value: 'plus', label: 'Plus/Minus' },
          { value: 'arrow', label: 'Arrow' },
          { value: 'caret', label: 'Caret' },
        ],
        defaultValue: 'chevron',
      },
      {
        key: 'style.headerAlign',
        label: 'Header Alignment',
        type: 'select',
        options: [
          { value: 'left', label: 'Left' },
          { value: 'center', label: 'Center' },
          { value: 'right', label: 'Right' },
        ],
        defaultValue: 'left',
      },
      {
        key: 'style.headerPadding',
        label: 'Header Padding',
        type: 'select',
        options: [
          { value: 'compact', label: 'Compact' },
          { value: 'comfortable', label: 'Comfortable' },
          { value: 'spacious', label: 'Spacious' },
        ],
        defaultValue: 'comfortable',
      },
      {
        key: 'style.contentPadding',
        label: 'Content Padding',
        type: 'select',
        options: [
          { value: 'compact', label: 'Compact' },
          { value: 'comfortable', label: 'Comfortable' },
          { value: 'spacious', label: 'Spacious' },
        ],
        defaultValue: 'comfortable',
      },
      {
        key: 'style.borderRadius',
        label: 'Border Radius (px)',
        type: 'number',
        min: 0,
        max: 24,
        step: 2,
        defaultValue: 8,
      },
      {
        key: 'animation.enabled',
        label: 'Enable Animations',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'animation.duration',
        label: 'Animation Duration (ms)',
        type: 'number',
        min: 100,
        max: 1000,
        step: 50,
        defaultValue: 200,
        showIf: { property: 'animation.enabled', value: true },
      },
      {
        key: 'interaction.persist',
        label: 'Remember State',
        type: 'boolean',
        defaultValue: false,
        description: 'Save open/closed state in browser storage',
      },
      {
        key: 'interaction.urlHash',
        label: 'Update URL Hash',
        type: 'boolean',
        defaultValue: false,
        description: 'Update browser URL when sections open',
      },
      {
        key: 'colors.headerBg',
        label: 'Header Background',
        type: 'select',
        options: [
          { value: 'default', label: 'Default' },
          { value: 'muted', label: 'Muted' },
          { value: 'accent', label: 'Accent' },
          { value: 'transparent', label: 'Transparent' },
        ],
        defaultValue: 'default',
      },
    ],
  },

  // ============================================
  // CONTENT BLOCKS
  // ============================================
  heading: {
    type: 'heading',
    category: 'content',
    label: 'Heading',
    description: 'Text heading (H1-H6)',
    icon: 'Heading',
    supportsChildren: false,
    defaultProps: {
      text: {
        content: 'Heading Text',
        level: 2,
        align: 'left',
        size: '2rem',
        weight: 'bold',
      },
    },
    propertySchema: [
      {
        key: 'text.content',
        label: 'Text',
        type: 'string',
        required: true,
        defaultValue: 'Heading Text',
      },
      {
        key: 'text.level',
        label: 'Level',
        type: 'select',
        options: [
          { value: 1, label: 'H1 (Largest)' },
          { value: 2, label: 'H2' },
          { value: 3, label: 'H3' },
          { value: 4, label: 'H4' },
          { value: 5, label: 'H5' },
          { value: 6, label: 'H6 (Smallest)' },
        ],
        defaultValue: 2,
      },
      {
        key: 'text.align',
        label: 'Alignment',
        type: 'alignment',
        defaultValue: 'left',
      },
      {
        key: 'text.color',
        label: 'Color',
        type: 'color',
        defaultValue: 'inherit',
      },
    ],
  },

  paragraph: {
    type: 'paragraph',
    category: 'content',
    label: 'Paragraph',
    description: 'Rich text paragraph',
    icon: 'AlignLeft',
    supportsChildren: false,
    defaultProps: {
      text: {
        content: 'Enter your text here...',
        align: 'left',
      },
    },
    propertySchema: [
      {
        key: 'text.content',
        label: 'Content',
        type: 'richtext',
        required: true,
        defaultValue: 'Enter your text here...',
      },
      {
        key: 'text.align',
        label: 'Alignment',
        type: 'alignment',
        defaultValue: 'left',
      },
      {
        key: 'text.size',
        label: 'Font Size',
        type: 'string',
        defaultValue: '1rem',
      },
    ],
  },

  button: {
    type: 'button',
    category: 'content',
    label: 'Button',
    description: 'Call-to-action button',
    icon: 'MousePointerClick',
    supportsChildren: false,
    defaultProps: {
      button: {
        text: 'Click Me',
        href: '#',
        variant: 'default',
        size: 'md',
        openInNewTab: false,
      },
    },
    propertySchema: [
      {
        key: 'button.text',
        label: 'Button Text',
        type: 'string',
        required: true,
        defaultValue: 'Click Me',
      },
      {
        key: 'button.href',
        label: 'Link URL',
        type: 'string',
        defaultValue: '#',
      },
      {
        key: 'button.variant',
        label: 'Variant',
        type: 'select',
        options: [
          { value: 'default', label: 'Default' },
          { value: 'primary', label: 'Primary' },
          { value: 'secondary', label: 'Secondary' },
          { value: 'outline', label: 'Outline' },
          { value: 'ghost', label: 'Ghost' },
        ],
        defaultValue: 'default',
      },
      {
        key: 'button.size',
        label: 'Size',
        type: 'select',
        options: [
          { value: 'sm', label: 'Small' },
          { value: 'md', label: 'Medium' },
          { value: 'lg', label: 'Large' },
        ],
        defaultValue: 'md',
      },
      {
        key: 'button.icon',
        label: 'Icon',
        type: 'icon',
        defaultValue: '',
        description: 'Optional icon to display with button',
      },
      {
        key: 'button.openInNewTab',
        label: 'Open in New Tab',
        type: 'boolean',
        defaultValue: false,
      },
    ],
  },

  image: {
    type: 'image',
    category: 'content',
    label: 'Image',
    description: 'Image block',
    icon: 'ImageIcon',
    supportsChildren: false,
    defaultProps: {
      image: {
        src: 'https://via.placeholder.com/800x400',
        alt: 'Placeholder image',
        width: '100%',
        height: 'auto',
        objectFit: 'cover',
      },
    },
    propertySchema: [
      {
        key: 'image.src',
        label: 'Image URL',
        type: 'image',
        required: true,
        defaultValue: 'https://via.placeholder.com/800x400',
      },
      {
        key: 'image.alt',
        label: 'Alt Text',
        type: 'string',
        required: true,
        defaultValue: 'Image description',
      },
      {
        key: 'image.objectFit',
        label: 'Object Fit',
        type: 'select',
        options: [
          { value: 'cover', label: 'Cover' },
          { value: 'contain', label: 'Contain' },
          { value: 'fill', label: 'Fill' },
          { value: 'none', label: 'None' },
        ],
        defaultValue: 'cover',
      },
    ],
  },

  video: {
    type: 'video',
    category: 'content',
    label: 'Video',
    description: 'Video embed (YouTube, Vimeo, or custom)',
    icon: 'Video',
    supportsChildren: false,
    defaultProps: {
      video: {
        src: '',
        provider: 'youtube',
        autoplay: false,
        controls: true,
        loop: false,
      },
    },
    propertySchema: [
      {
        key: 'video.provider',
        label: 'Provider',
        type: 'select',
        options: [
          { value: 'youtube', label: 'YouTube' },
          { value: 'vimeo', label: 'Vimeo' },
          { value: 'custom', label: 'Custom URL' },
        ],
        defaultValue: 'youtube',
      },
      {
        key: 'video.src',
        label: 'Video URL',
        type: 'string',
        required: true,
        defaultValue: '',
      },
      {
        key: 'video.autoplay',
        label: 'Autoplay',
        type: 'boolean',
        defaultValue: false,
      },
      {
        key: 'video.controls',
        label: 'Show Controls',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'video.loop',
        label: 'Loop',
        type: 'boolean',
        defaultValue: false,
      },
    ],
  },

  divider: {
    type: 'divider',
    category: 'content',
    label: 'Divider',
    description: 'Visual separator line',
    icon: 'Minus',
    supportsChildren: false,
    defaultProps: {
      divider: {
        orientation: 'horizontal',
        thickness: 1,
        color: '#e5e7eb',
      },
    },
    propertySchema: [
      {
        key: 'divider.orientation',
        label: 'Orientation',
        type: 'select',
        options: [
          { value: 'horizontal', label: 'Horizontal' },
          { value: 'vertical', label: 'Vertical' },
        ],
        defaultValue: 'horizontal',
      },
      {
        key: 'divider.thickness',
        label: 'Thickness (px)',
        type: 'number',
        min: 1,
        max: 10,
        step: 1,
        defaultValue: 1,
      },
      {
        key: 'divider.color',
        label: 'Color',
        type: 'color',
        defaultValue: '#e5e7eb',
      },
    ],
  },

  spacer: {
    type: 'spacer',
    category: 'content',
    label: 'Spacer',
    description: 'Empty space for vertical/horizontal spacing',
    icon: 'MoveVertical',
    supportsChildren: false,
    defaultProps: {
      spacer: {
        height: 32,
      },
    },
    propertySchema: [
      {
        key: 'spacer.height',
        label: 'Height (px)',
        type: 'number',
        min: 8,
        max: 200,
        step: 8,
        defaultValue: 32,
      },
    ],
  },

  // ============================================
  // DATA BLOCKS (stub implementations)
  // ============================================
  'announcement-bar': {
    type: 'announcement-bar',
    category: 'widget',
    label: 'Announcement Bar',
    description: 'Alert/announcement banner',
    icon: 'Bell',
    supportsChildren: false,
    defaultProps: {
      announcement: {
        message: 'Important announcement goes here',
        type: 'info',
        dismissible: true,
        icon: 'Bell',
        linkText: '',
        linkHref: '',
      },
      scheduling: {
        enabled: false,
        startDate: '',
        endDate: '',
        timezone: 'America/New_York',
      },
      targeting: {
        enabled: false,
        roles: [],
        users: [],
      },
      persistence: {
        rememberDismissal: true,
        cookieExpiry: 7,
      },
      style: {
        position: 'top',
        sticky: true,
        showCloseButton: true,
      },
    },
    propertySchema: [
      {
        key: 'announcement.message',
        label: 'Message',
        type: 'richtext',
        required: true,
        defaultValue: 'Important announcement goes here',
      },
      {
        key: 'announcement.type',
        label: 'Type',
        type: 'select',
        options: [
          { value: 'info', label: 'Info' },
          { value: 'success', label: 'Success' },
          { value: 'warning', label: 'Warning' },
          { value: 'error', label: 'Error' },
        ],
        defaultValue: 'info',
      },
      {
        key: 'announcement.icon',
        label: 'Icon',
        type: 'icon',
        defaultValue: 'Bell',
        description: 'Icon to display in the announcement bar',
      },
      {
        key: 'announcement.linkText',
        label: 'Link Text',
        type: 'string',
        defaultValue: '',
      },
      {
        key: 'announcement.linkHref',
        label: 'Link URL',
        type: 'string',
        defaultValue: '',
        showIf: { property: 'announcement.linkText', value: '' },
      },
      {
        key: 'announcement.dismissible',
        label: 'Dismissible',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'persistence.rememberDismissal',
        label: 'Remember Dismissal',
        type: 'boolean',
        defaultValue: true,
        description: 'Use cookie to remember when user dismisses',
        showIf: { property: 'announcement.dismissible', value: true },
      },
      {
        key: 'persistence.cookieExpiry',
        label: 'Cookie Expiry (days)',
        type: 'number',
        min: 1,
        max: 365,
        step: 1,
        defaultValue: 7,
        showIf: { property: 'persistence.rememberDismissal', value: true },
      },
      {
        key: 'scheduling.enabled',
        label: 'Enable Scheduling',
        type: 'boolean',
        defaultValue: false,
      },
      {
        key: 'scheduling.startDate',
        label: 'Start Date',
        type: 'string',
        defaultValue: '',
        description: 'ISO 8601 format (YYYY-MM-DDTHH:mm:ss)',
        showIf: { property: 'scheduling.enabled', value: true },
      },
      {
        key: 'scheduling.endDate',
        label: 'End Date',
        type: 'string',
        defaultValue: '',
        description: 'ISO 8601 format (YYYY-MM-DDTHH:mm:ss)',
        showIf: { property: 'scheduling.enabled', value: true },
      },
      {
        key: 'targeting.enabled',
        label: 'Enable Targeting',
        type: 'boolean',
        defaultValue: false,
        description: 'Show to specific roles or users',
      },
      {
        key: 'style.position',
        label: 'Position',
        type: 'select',
        options: [
          { value: 'top', label: 'Top' },
          { value: 'bottom', label: 'Bottom' },
        ],
        defaultValue: 'top',
      },
      {
        key: 'style.sticky',
        label: 'Sticky',
        type: 'boolean',
        defaultValue: true,
        description: 'Stick to viewport when scrolling',
      },
    ],
  },

  'stats-grid': {
    type: 'stats-grid',
    category: 'data',
    label: 'Stats Grid',
    description: 'Statistics display grid',
    icon: 'BarChart3',
    supportsChildren: false,
    defaultProps: {
      metrics: [
        {
          label: 'Open Tickets',
          value: '0',
          icon: 'Ticket',
          color: 'blue',
          trend: null,
          clickAction: '/tickets',
          dataSource: 'live',
          apiEndpoint: '/api/portal/stats/tickets',
        },
        {
          label: 'KB Articles',
          value: '0',
          icon: 'BookOpen',
          color: 'green',
          trend: null,
          clickAction: '/kb',
          dataSource: 'live',
          apiEndpoint: '/api/portal/stats/kb-articles',
        },
        {
          label: 'Pending Requests',
          value: '0',
          icon: 'Clock',
          color: 'orange',
          trend: null,
          clickAction: '/requests',
          dataSource: 'live',
          apiEndpoint: '/api/portal/stats/requests',
        },
      ],
      layout: {
        columns: 3,
        gap: 4,
        responsiveColumns: {
          mobile: 1,
          tablet: 2,
          desktop: 3,
        },
      },
      display: {
        showIcons: true,
        showTrends: true,
        showClickableHint: false,
        variant: 'card',
        size: 'medium',
      },
      refresh: {
        enabled: true,
        interval: 30000,
        showLastUpdated: true,
      },
    },
    propertySchema: [
      {
        key: 'layout.columns',
        label: 'Desktop Columns',
        type: 'select',
        options: [
          { value: 2, label: '2 Columns' },
          { value: 3, label: '3 Columns' },
          { value: 4, label: '4 Columns' },
        ],
        defaultValue: 3,
      },
      {
        key: 'layout.responsiveColumns.tablet',
        label: 'Tablet Columns',
        type: 'select',
        options: [
          { value: 1, label: '1 Column' },
          { value: 2, label: '2 Columns' },
          { value: 3, label: '3 Columns' },
        ],
        defaultValue: 2,
      },
      {
        key: 'layout.responsiveColumns.mobile',
        label: 'Mobile Columns',
        type: 'select',
        options: [
          { value: 1, label: '1 Column' },
          { value: 2, label: '2 Columns' },
        ],
        defaultValue: 1,
      },
      {
        key: 'display.variant',
        label: 'Display Variant',
        type: 'select',
        options: [
          { value: 'card', label: 'Card' },
          { value: 'minimal', label: 'Minimal' },
          { value: 'bordered', label: 'Bordered' },
        ],
        defaultValue: 'card',
      },
      {
        key: 'display.size',
        label: 'Size',
        type: 'select',
        options: [
          { value: 'small', label: 'Small' },
          { value: 'medium', label: 'Medium' },
          { value: 'large', label: 'Large' },
        ],
        defaultValue: 'medium',
      },
      {
        key: 'display.showIcons',
        label: 'Show Icons',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'display.showTrends',
        label: 'Show Trend Indicators',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'display.showClickableHint',
        label: 'Show Clickable Hint',
        type: 'boolean',
        defaultValue: false,
      },
      {
        key: 'refresh.enabled',
        label: 'Auto Refresh',
        type: 'boolean',
        defaultValue: true,
        description: 'Automatically refresh stats from API',
      },
      {
        key: 'refresh.interval',
        label: 'Refresh Interval (ms)',
        type: 'number',
        min: 10000,
        max: 300000,
        step: 5000,
        defaultValue: 30000,
        showIf: { property: 'refresh.enabled', value: true },
      },
      {
        key: 'refresh.showLastUpdated',
        label: 'Show Last Updated',
        type: 'boolean',
        defaultValue: true,
        showIf: { property: 'refresh.enabled', value: true },
      },
    ],
  },

  'icon-grid': {
    type: 'icon-grid',
    category: 'content',
    label: 'Icon Grid',
    description: 'Grid of icons with text',
    icon: 'Grid2x2',
    supportsChildren: false,
    defaultProps: {
      items: [
        {
          icon: 'Ticket',
          title: 'Submit Ticket',
          description: 'Get help from our support team',
          href: '/tickets/new',
          openInNewTab: false,
        },
        {
          icon: 'BookOpen',
          title: 'Knowledge Base',
          description: 'Browse help articles',
          href: '/kb',
          openInNewTab: false,
        },
        {
          icon: 'ShoppingCart',
          title: 'Service Catalog',
          description: 'Request services',
          href: '/catalog',
          openInNewTab: false,
        },
      ],
      layout: {
        columns: 3,
        gap: 4,
        padding: 4,
        responsiveColumns: {
          mobile: 1,
          tablet: 2,
          desktop: 3,
        },
      },
      appearance: {
        iconSize: 48,
        iconColor: 'primary',
        hoverEffect: 'scale',
        showDescription: true,
        alignment: 'center',
      },
    },
    propertySchema: [
      {
        key: 'layout.columns',
        label: 'Desktop Columns',
        type: 'select',
        options: [
          { value: 2, label: '2 Columns' },
          { value: 3, label: '3 Columns' },
          { value: 4, label: '4 Columns' },
          { value: 6, label: '6 Columns' },
        ],
        defaultValue: 3,
      },
      {
        key: 'layout.responsiveColumns.tablet',
        label: 'Tablet Columns',
        type: 'select',
        options: [
          { value: 1, label: '1 Column' },
          { value: 2, label: '2 Columns' },
          { value: 3, label: '3 Columns' },
        ],
        defaultValue: 2,
      },
      {
        key: 'layout.responsiveColumns.mobile',
        label: 'Mobile Columns',
        type: 'select',
        options: [
          { value: 1, label: '1 Column' },
          { value: 2, label: '2 Columns' },
        ],
        defaultValue: 1,
      },
      {
        key: 'appearance.iconSize',
        label: 'Icon Size (px)',
        type: 'number',
        min: 24,
        max: 96,
        step: 8,
        defaultValue: 48,
      },
      {
        key: 'appearance.iconColor',
        label: 'Icon Color',
        type: 'select',
        options: [
          { value: 'primary', label: 'Primary' },
          { value: 'secondary', label: 'Secondary' },
          { value: 'accent', label: 'Accent' },
          { value: 'muted', label: 'Muted' },
          { value: 'custom', label: 'Custom' },
        ],
        defaultValue: 'primary',
      },
      {
        key: 'appearance.customIconColor',
        label: 'Custom Icon Color',
        type: 'color',
        defaultValue: '#000000',
        showIf: { property: 'appearance.iconColor', value: 'custom' },
      },
      {
        key: 'appearance.hoverEffect',
        label: 'Hover Effect',
        type: 'select',
        options: [
          { value: 'none', label: 'None' },
          { value: 'scale', label: 'Scale' },
          { value: 'lift', label: 'Lift' },
          { value: 'glow', label: 'Glow' },
          { value: 'rotate', label: 'Rotate' },
        ],
        defaultValue: 'scale',
      },
      {
        key: 'appearance.showDescription',
        label: 'Show Descriptions',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'appearance.alignment',
        label: 'Content Alignment',
        type: 'select',
        options: [
          { value: 'left', label: 'Left' },
          { value: 'center', label: 'Center' },
          { value: 'right', label: 'Right' },
        ],
        defaultValue: 'center',
      },
      {
        key: 'layout.gap',
        label: 'Gap',
        type: 'spacing',
        defaultValue: 4,
      },
      {
        key: 'items',
        label: 'Icon Grid Items',
        type: 'array',
        description: 'Configure icons, titles, and links',
        itemSchema: {
          icon: { label: 'Icon', type: 'icon', defaultValue: 'Circle' },
          title: { label: 'Title', type: 'string', defaultValue: 'Item Title' },
          description: { label: 'Description', type: 'string', defaultValue: 'Item description' },
          href: { label: 'Link URL', type: 'string', defaultValue: '' },
          openInNewTab: { label: 'Open in New Tab', type: 'boolean', defaultValue: false },
        },
      },
    ],
  },

  testimonial: {
    type: 'testimonial',
    category: 'content',
    label: 'Testimonial',
    description: 'Customer testimonial block',
    icon: 'Quote',
    supportsChildren: false,
    defaultProps: {
      testimonials: [
        {
          quote: 'This service has been incredible for our business.',
          author: 'John Smith',
          title: 'IT Director',
          company: 'Acme Corp',
          avatar: '',
          rating: 5,
        },
      ],
      display: {
        showRating: true,
        showAvatar: true,
        showCompany: true,
        quoteStyle: 'card',
        rotation: {
          enabled: false,
          interval: 5000,
          autoplay: true,
        },
      },
      carousel: {
        showControls: true,
        showIndicators: true,
        loop: true,
      },
      style: {
        quoteColor: 'muted',
        authorColor: 'default',
        backgroundColor: 'transparent',
      },
    },
    propertySchema: [
      {
        key: 'display.quoteStyle',
        label: 'Quote Style',
        type: 'select',
        options: [
          { value: 'card', label: 'Card' },
          { value: 'blockquote', label: 'Blockquote' },
          { value: 'minimal', label: 'Minimal' },
        ],
        defaultValue: 'card',
      },
      {
        key: 'display.showRating',
        label: 'Show Rating',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'display.showAvatar',
        label: 'Show Avatar',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'display.showCompany',
        label: 'Show Company',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'display.rotation.enabled',
        label: 'Enable Rotation',
        type: 'boolean',
        defaultValue: false,
        description: 'Automatically rotate through testimonials',
      },
      {
        key: 'display.rotation.interval',
        label: 'Rotation Interval (ms)',
        type: 'number',
        min: 3000,
        max: 15000,
        step: 1000,
        defaultValue: 5000,
        showIf: { property: 'display.rotation.enabled', value: true },
      },
      {
        key: 'display.rotation.autoplay',
        label: 'Autoplay',
        type: 'boolean',
        defaultValue: true,
        showIf: { property: 'display.rotation.enabled', value: true },
      },
      {
        key: 'carousel.showControls',
        label: 'Show Navigation Controls',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'carousel.showIndicators',
        label: 'Show Indicators',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'carousel.loop',
        label: 'Loop Carousel',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'style.quoteColor',
        label: 'Quote Color',
        type: 'select',
        options: [
          { value: 'default', label: 'Default' },
          { value: 'muted', label: 'Muted' },
          { value: 'accent', label: 'Accent' },
        ],
        defaultValue: 'muted',
      },
      {
        key: 'style.backgroundColor',
        label: 'Background Color',
        type: 'color',
        defaultValue: 'transparent',
      },
    ],
  },

  faq: {
    type: 'faq',
    category: 'content',
    label: 'FAQ',
    description: 'Frequently asked questions',
    icon: 'HelpCircle',
    supportsChildren: false,
    defaultProps: {
      items: [
        {
          question: 'How do I submit a support ticket?',
          answer: 'Navigate to the Tickets section and click "New Ticket". Fill out the form with your issue details.',
          category: 'Getting Started',
          kbArticleId: '',
        },
        {
          question: 'What are your support hours?',
          answer: 'Our support team is available Monday-Friday, 9 AM - 5 PM EST.',
          category: 'General',
          kbArticleId: '',
        },
      ],
      display: {
        expandBehavior: 'single',
        showSearch: true,
        showCategories: true,
        defaultExpanded: false,
        showIcons: true,
      },
      search: {
        placeholder: 'Search FAQs...',
        highlightResults: true,
      },
      style: {
        variant: 'accordion',
        iconPosition: 'right',
        spacing: 'comfortable',
      },
      integration: {
        linkToKB: true,
        kbLinkText: 'View full article',
      },
    },
    propertySchema: [
      {
        key: 'display.expandBehavior',
        label: 'Expand Behavior',
        type: 'select',
        options: [
          { value: 'single', label: 'Single (collapse others)' },
          { value: 'multiple', label: 'Multiple (allow multiple open)' },
        ],
        defaultValue: 'single',
      },
      {
        key: 'display.defaultExpanded',
        label: 'First Item Expanded',
        type: 'boolean',
        defaultValue: false,
        description: 'Expand the first FAQ item by default',
      },
      {
        key: 'display.showSearch',
        label: 'Show Search',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'search.placeholder',
        label: 'Search Placeholder',
        type: 'string',
        defaultValue: 'Search FAQs...',
        showIf: { property: 'display.showSearch', value: true },
      },
      {
        key: 'search.highlightResults',
        label: 'Highlight Search Results',
        type: 'boolean',
        defaultValue: true,
        showIf: { property: 'display.showSearch', value: true },
      },
      {
        key: 'display.showCategories',
        label: 'Show Category Filter',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'display.showIcons',
        label: 'Show Expand Icons',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'style.variant',
        label: 'Style Variant',
        type: 'select',
        options: [
          { value: 'accordion', label: 'Accordion' },
          { value: 'cards', label: 'Cards' },
          { value: 'minimal', label: 'Minimal' },
        ],
        defaultValue: 'accordion',
      },
      {
        key: 'style.iconPosition',
        label: 'Icon Position',
        type: 'select',
        options: [
          { value: 'left', label: 'Left' },
          { value: 'right', label: 'Right' },
        ],
        defaultValue: 'right',
      },
      {
        key: 'style.spacing',
        label: 'Spacing',
        type: 'select',
        options: [
          { value: 'compact', label: 'Compact' },
          { value: 'comfortable', label: 'Comfortable' },
          { value: 'spacious', label: 'Spacious' },
        ],
        defaultValue: 'comfortable',
      },
      {
        key: 'integration.linkToKB',
        label: 'Link to KB Articles',
        type: 'boolean',
        defaultValue: true,
        description: 'Show link to full KB article when available',
      },
      {
        key: 'integration.kbLinkText',
        label: 'KB Link Text',
        type: 'string',
        defaultValue: 'View full article',
        showIf: { property: 'integration.linkToKB', value: true },
      },
    ],
  },

  'custom-html': {
    type: 'custom-html',
    category: 'content',
    label: 'Custom HTML',
    description: 'Custom HTML block (sanitized)',
    icon: 'Code',
    supportsChildren: false,
    defaultProps: {
      html: {
        content: '<div>Enter your HTML here...</div>',
        sanitize: true,
        allowedTags: ['div', 'p', 'span', 'a', 'img', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'ul', 'ol', 'li', 'br', 'strong', 'em', 'u'],
        allowedAttributes: ['class', 'style', 'href', 'src', 'alt', 'title', 'target'],
      },
      scripts: {
        allowScripts: false,
        scriptSrc: '',
        inlineScript: '',
      },
      styles: {
        customCSS: '',
        scopeStyles: true,
      },
      advanced: {
        wrapInContainer: true,
        containerClass: '',
        lazyLoad: false,
      },
    },
    propertySchema: [
      {
        key: 'html.content',
        label: 'HTML Content',
        type: 'richtext',
        required: true,
        defaultValue: '<div>Enter your HTML here...</div>',
      },
      {
        key: 'html.sanitize',
        label: 'Sanitize HTML',
        type: 'boolean',
        defaultValue: true,
        description: 'Remove potentially dangerous HTML tags and attributes',
      },
      {
        key: 'scripts.allowScripts',
        label: 'Allow Scripts',
        type: 'boolean',
        defaultValue: false,
        description: 'WARNING: Only enable if you trust the source',
      },
      {
        key: 'scripts.scriptSrc',
        label: 'External Script URL',
        type: 'string',
        defaultValue: '',
        description: 'Load external JavaScript file',
        showIf: { property: 'scripts.allowScripts', value: true },
      },
      {
        key: 'scripts.inlineScript',
        label: 'Inline JavaScript',
        type: 'richtext',
        defaultValue: '',
        description: 'Custom JavaScript code',
        showIf: { property: 'scripts.allowScripts', value: true },
      },
      {
        key: 'styles.customCSS',
        label: 'Custom CSS',
        type: 'richtext',
        defaultValue: '',
        description: 'Custom CSS styles for this block',
      },
      {
        key: 'styles.scopeStyles',
        label: 'Scope Styles',
        type: 'boolean',
        defaultValue: true,
        description: 'Prevent CSS from affecting other blocks',
      },
      {
        key: 'advanced.wrapInContainer',
        label: 'Wrap in Container',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'advanced.containerClass',
        label: 'Container CSS Class',
        type: 'string',
        defaultValue: '',
        showIf: { property: 'advanced.wrapInContainer', value: true },
      },
      {
        key: 'advanced.lazyLoad',
        label: 'Lazy Load',
        type: 'boolean',
        defaultValue: false,
        description: 'Defer loading until block is visible',
      },
    ],
  },

  form: {
    type: 'form',
    category: 'form',
    label: 'Form',
    description: 'Service catalog form',
    icon: 'FileText',
    supportsChildren: false,
    defaultProps: {
      form: {
        title: 'Request Form',
        description: 'Fill out the form to submit your request',
        submitButtonText: 'Submit Request',
        resetButtonText: 'Reset',
        showResetButton: false,
      },
      integration: {
        serviceCatalogId: '',
        apiEndpoint: '/api/portal/form-submit',
        method: 'POST',
      },
      fields: [
        {
          id: 'name',
          type: 'text',
          label: 'Name',
          placeholder: 'Enter your name',
          required: true,
          validation: '',
          defaultValue: '',
        },
        {
          id: 'email',
          type: 'email',
          label: 'Email',
          placeholder: 'your.email@example.com',
          required: true,
          validation: '',
          defaultValue: '',
        },
        {
          id: 'description',
          type: 'textarea',
          label: 'Description',
          placeholder: 'Describe your request...',
          required: true,
          validation: '',
          defaultValue: '',
        },
      ],
      submission: {
        successMessage: 'Your request has been submitted successfully!',
        errorMessage: 'There was an error submitting your request. Please try again.',
        redirectUrl: '',
        redirectDelay: 3000,
      },
      upload: {
        enabled: false,
        maxFiles: 5,
        maxSizePerFile: 10485760,
        acceptedTypes: ['image/*', 'application/pdf', '.doc', '.docx'],
      },
      validation: {
        showErrorsOnSubmit: true,
        showErrorsOnBlur: false,
        customValidation: false,
      },
      style: {
        layout: 'vertical',
        labelPosition: 'top',
        fieldSpacing: 'comfortable',
      },
    },
    propertySchema: [
      {
        key: 'form.title',
        label: 'Form Title',
        type: 'string',
        defaultValue: 'Request Form',
      },
      {
        key: 'form.description',
        label: 'Form Description',
        type: 'string',
        defaultValue: 'Fill out the form to submit your request',
      },
      {
        key: 'integration.serviceCatalogId',
        label: 'Service Catalog Item',
        type: 'service-catalog-select',
        defaultValue: '',
        description: 'Select a service catalog item to link with this form',
      },
      {
        key: 'integration.apiEndpoint',
        label: 'Submission Endpoint',
        type: 'api-endpoint-select',
        required: true,
        defaultValue: '/api/service-requests',
        description: 'API endpoint for form submission',
        blockType: 'form',
      },
      {
        key: 'form.submitButtonText',
        label: 'Submit Button Text',
        type: 'string',
        defaultValue: 'Submit Request',
      },
      {
        key: 'form.showResetButton',
        label: 'Show Reset Button',
        type: 'boolean',
        defaultValue: false,
      },
      {
        key: 'form.resetButtonText',
        label: 'Reset Button Text',
        type: 'string',
        defaultValue: 'Reset',
        showIf: { property: 'form.showResetButton', value: true },
      },
      {
        key: 'submission.successMessage',
        label: 'Success Message',
        type: 'string',
        defaultValue: 'Your request has been submitted successfully!',
      },
      {
        key: 'submission.errorMessage',
        label: 'Error Message',
        type: 'string',
        defaultValue: 'There was an error submitting your request. Please try again.',
      },
      {
        key: 'submission.redirectUrl',
        label: 'Redirect URL',
        type: 'string',
        defaultValue: '',
        description: 'Redirect after successful submission',
      },
      {
        key: 'submission.redirectDelay',
        label: 'Redirect Delay (ms)',
        type: 'number',
        min: 0,
        max: 10000,
        step: 500,
        defaultValue: 3000,
        showIf: { property: 'submission.redirectUrl', value: '' },
      },
      {
        key: 'upload.enabled',
        label: 'Enable File Upload',
        type: 'boolean',
        defaultValue: false,
      },
      {
        key: 'upload.maxFiles',
        label: 'Max Files',
        type: 'number',
        min: 1,
        max: 20,
        step: 1,
        defaultValue: 5,
        showIf: { property: 'upload.enabled', value: true },
      },
      {
        key: 'upload.maxSizePerFile',
        label: 'Max Size Per File (bytes)',
        type: 'number',
        min: 1048576,
        max: 52428800,
        step: 1048576,
        defaultValue: 10485760,
        description: '10485760 = 10MB',
        showIf: { property: 'upload.enabled', value: true },
      },
      {
        key: 'validation.showErrorsOnSubmit',
        label: 'Show Errors on Submit',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'validation.showErrorsOnBlur',
        label: 'Show Errors on Blur',
        type: 'boolean',
        defaultValue: false,
      },
      {
        key: 'style.layout',
        label: 'Layout',
        type: 'select',
        options: [
          { value: 'vertical', label: 'Vertical' },
          { value: 'horizontal', label: 'Horizontal' },
          { value: 'grid', label: 'Grid (2 columns)' },
        ],
        defaultValue: 'vertical',
      },
      {
        key: 'style.labelPosition',
        label: 'Label Position',
        type: 'select',
        options: [
          { value: 'top', label: 'Top' },
          { value: 'left', label: 'Left' },
          { value: 'inside', label: 'Inside (Floating)' },
        ],
        defaultValue: 'top',
      },
      {
        key: 'style.fieldSpacing',
        label: 'Field Spacing',
        type: 'select',
        options: [
          { value: 'compact', label: 'Compact' },
          { value: 'comfortable', label: 'Comfortable' },
          { value: 'spacious', label: 'Spacious' },
        ],
        defaultValue: 'comfortable',
      },
    ],
  },

  'ticket-list': {
    type: 'ticket-list',
    category: 'data',
    label: 'Ticket List',
    description: 'Dynamic list of tickets',
    icon: 'Ticket',
    supportsChildren: false,
    defaultProps: {
      integration: {
        apiEndpoint: '/api/portal/tickets',
        autoRefresh: true,
        refreshInterval: 30000,
      },
      filters: {
        status: '',
        priority: '',
        assignedToMe: false,
        createdByMe: true,
        dateRange: '',
      },
      display: {
        layout: 'list',
        showSearch: true,
        itemsPerPage: 10,
        sortBy: 'createdAt',
        sortOrder: 'desc',
      },
      columns: {
        showId: true,
        showStatus: true,
        showPriority: true,
        showAssignee: true,
        showCreatedDate: true,
        showUpdatedDate: false,
        showCategory: true,
      },
      interaction: {
        clickBehavior: 'navigate',
        navigateUrl: '/tickets/:id',
        showQuickActions: true,
      },
      style: {
        variant: 'bordered',
        density: 'comfortable',
        highlightUrgent: true,
      },
      emptyState: {
        message: 'No tickets found',
        showCreateButton: true,
        createButtonText: 'Create Ticket',
        createButtonUrl: '/tickets/new',
      },
    },
    propertySchema: [
      {
        key: 'integration.apiEndpoint',
        label: 'Data Source',
        type: 'api-endpoint-select',
        defaultValue: '/api/tickets',
        description: 'Select API endpoint to fetch tickets',
        blockType: 'ticket-list',
      },
      {
        key: 'display.layout',
        label: 'Layout',
        type: 'select',
        options: [
          { value: 'list', label: 'List' },
          { value: 'table', label: 'Table' },
          { value: 'compact', label: 'Compact' },
        ],
        defaultValue: 'list',
      },
      {
        key: 'filters.status',
        label: 'Filter by Status',
        type: 'select',
        options: [
          { value: '', label: 'All' },
          { value: 'open', label: 'Open' },
          { value: 'in_progress', label: 'In Progress' },
          { value: 'resolved', label: 'Resolved' },
          { value: 'closed', label: 'Closed' },
        ],
        defaultValue: '',
      },
      {
        key: 'filters.priority',
        label: 'Filter by Priority',
        type: 'select',
        options: [
          { value: '', label: 'All' },
          { value: 'low', label: 'Low' },
          { value: 'medium', label: 'Medium' },
          { value: 'high', label: 'High' },
          { value: 'urgent', label: 'Urgent' },
        ],
        defaultValue: '',
      },
      {
        key: 'filters.assignedToMe',
        label: 'Assigned to Me Only',
        type: 'boolean',
        defaultValue: false,
      },
      {
        key: 'filters.createdByMe',
        label: 'Created by Me Only',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'display.showSearch',
        label: 'Show Search',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'display.itemsPerPage',
        label: 'Items Per Page',
        type: 'number',
        min: 5,
        max: 100,
        step: 5,
        defaultValue: 10,
      },
      {
        key: 'display.sortBy',
        label: 'Sort By',
        type: 'select',
        options: [
          { value: 'createdAt', label: 'Created Date' },
          { value: 'updatedAt', label: 'Updated Date' },
          { value: 'priority', label: 'Priority' },
          { value: 'status', label: 'Status' },
        ],
        defaultValue: 'createdAt',
      },
      {
        key: 'display.sortOrder',
        label: 'Sort Order',
        type: 'select',
        options: [
          { value: 'asc', label: 'Ascending' },
          { value: 'desc', label: 'Descending' },
        ],
        defaultValue: 'desc',
      },
      {
        key: 'columns.showId',
        label: 'Show Ticket ID',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'columns.showStatus',
        label: 'Show Status',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'columns.showPriority',
        label: 'Show Priority',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'columns.showAssignee',
        label: 'Show Assignee',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'columns.showCreatedDate',
        label: 'Show Created Date',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'columns.showUpdatedDate',
        label: 'Show Updated Date',
        type: 'boolean',
        defaultValue: false,
      },
      {
        key: 'columns.showCategory',
        label: 'Show Category',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'interaction.clickBehavior',
        label: 'Click Behavior',
        type: 'select',
        options: [
          { value: 'navigate', label: 'Navigate to Detail Page' },
          { value: 'modal', label: 'Open in Modal' },
          { value: 'expand', label: 'Expand Inline' },
        ],
        defaultValue: 'navigate',
      },
      {
        key: 'interaction.showQuickActions',
        label: 'Show Quick Actions',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'integration.autoRefresh',
        label: 'Auto Refresh',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'integration.refreshInterval',
        label: 'Refresh Interval (ms)',
        type: 'number',
        min: 10000,
        max: 300000,
        step: 5000,
        defaultValue: 30000,
        showIf: { property: 'integration.autoRefresh', value: true },
      },
      {
        key: 'style.variant',
        label: 'Style Variant',
        type: 'select',
        options: [
          { value: 'default', label: 'Default' },
          { value: 'bordered', label: 'Bordered' },
          { value: 'striped', label: 'Striped' },
        ],
        defaultValue: 'bordered',
      },
      {
        key: 'style.density',
        label: 'Row Density',
        type: 'select',
        options: [
          { value: 'compact', label: 'Compact' },
          { value: 'comfortable', label: 'Comfortable' },
          { value: 'spacious', label: 'Spacious' },
        ],
        defaultValue: 'comfortable',
      },
      {
        key: 'style.highlightUrgent',
        label: 'Highlight Urgent Tickets',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'emptyState.showCreateButton',
        label: 'Show Create Button (Empty State)',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'emptyState.createButtonText',
        label: 'Create Button Text',
        type: 'string',
        defaultValue: 'Create Ticket',
        showIf: { property: 'emptyState.showCreateButton', value: true },
      },
    ],
  },

  'incident-list': {
    type: 'incident-list',
    category: 'data',
    label: 'Incident List',
    description: 'Dynamic list of incidents',
    icon: 'AlertTriangle',
    supportsChildren: false,
    defaultProps: {
      integration: {
        apiEndpoint: '/api/portal/incidents',
        autoRefresh: true,
        refreshInterval: 30000,
      },
      filters: {
        status: '',
        severity: '',
        affectedServices: [],
        showResolved: false,
      },
      display: {
        layout: 'list',
        showSearch: true,
        itemsPerPage: 10,
        sortBy: 'createdAt',
        sortOrder: 'desc',
      },
      columns: {
        showId: true,
        showStatus: true,
        showSeverity: true,
        showAffectedServices: true,
        showSLA: true,
        showCreatedDate: true,
        showResolvedDate: false,
      },
      sla: {
        showIndicators: true,
        highlightBreached: true,
        showTimeRemaining: true,
      },
      interaction: {
        clickBehavior: 'navigate',
        navigateUrl: '/incidents/:id',
        showQuickActions: false,
      },
      style: {
        variant: 'bordered',
        density: 'comfortable',
        severityColorCoding: true,
      },
    },
    propertySchema: [
      {
        key: 'display.layout',
        label: 'Layout',
        type: 'select',
        options: [
          { value: 'list', label: 'List' },
          { value: 'table', label: 'Table' },
          { value: 'cards', label: 'Cards' },
        ],
        defaultValue: 'list',
      },
      {
        key: 'filters.status',
        label: 'Filter by Status',
        type: 'select',
        options: [
          { value: '', label: 'All' },
          { value: 'new', label: 'New' },
          { value: 'investigating', label: 'Investigating' },
          { value: 'identified', label: 'Identified' },
          { value: 'monitoring', label: 'Monitoring' },
          { value: 'resolved', label: 'Resolved' },
        ],
        defaultValue: '',
      },
      {
        key: 'filters.severity',
        label: 'Filter by Severity',
        type: 'select',
        options: [
          { value: '', label: 'All' },
          { value: 'low', label: 'Low' },
          { value: 'medium', label: 'Medium' },
          { value: 'high', label: 'High' },
          { value: 'critical', label: 'Critical' },
        ],
        defaultValue: '',
      },
      {
        key: 'filters.showResolved',
        label: 'Show Resolved Incidents',
        type: 'boolean',
        defaultValue: false,
      },
      {
        key: 'display.showSearch',
        label: 'Show Search',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'display.itemsPerPage',
        label: 'Items Per Page',
        type: 'number',
        min: 5,
        max: 100,
        step: 5,
        defaultValue: 10,
      },
      {
        key: 'display.sortBy',
        label: 'Sort By',
        type: 'select',
        options: [
          { value: 'createdAt', label: 'Created Date' },
          { value: 'severity', label: 'Severity' },
          { value: 'status', label: 'Status' },
          { value: 'sla', label: 'SLA Remaining' },
        ],
        defaultValue: 'createdAt',
      },
      {
        key: 'display.sortOrder',
        label: 'Sort Order',
        type: 'select',
        options: [
          { value: 'asc', label: 'Ascending' },
          { value: 'desc', label: 'Descending' },
        ],
        defaultValue: 'desc',
      },
      {
        key: 'columns.showId',
        label: 'Show Incident ID',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'columns.showStatus',
        label: 'Show Status',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'columns.showSeverity',
        label: 'Show Severity',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'columns.showAffectedServices',
        label: 'Show Affected Services',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'columns.showSLA',
        label: 'Show SLA Status',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'columns.showCreatedDate',
        label: 'Show Created Date',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'columns.showResolvedDate',
        label: 'Show Resolved Date',
        type: 'boolean',
        defaultValue: false,
      },
      {
        key: 'sla.showIndicators',
        label: 'Show SLA Indicators',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'sla.highlightBreached',
        label: 'Highlight Breached SLAs',
        type: 'boolean',
        defaultValue: true,
        showIf: { property: 'sla.showIndicators', value: true },
      },
      {
        key: 'sla.showTimeRemaining',
        label: 'Show Time Remaining',
        type: 'boolean',
        defaultValue: true,
        showIf: { property: 'sla.showIndicators', value: true },
      },
      {
        key: 'interaction.clickBehavior',
        label: 'Click Behavior',
        type: 'select',
        options: [
          { value: 'navigate', label: 'Navigate to Detail Page' },
          { value: 'modal', label: 'Open in Modal' },
          { value: 'expand', label: 'Expand Inline' },
        ],
        defaultValue: 'navigate',
      },
      {
        key: 'integration.autoRefresh',
        label: 'Auto Refresh',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'integration.refreshInterval',
        label: 'Refresh Interval (ms)',
        type: 'number',
        min: 10000,
        max: 300000,
        step: 5000,
        defaultValue: 30000,
        showIf: { property: 'integration.autoRefresh', value: true },
      },
      {
        key: 'style.variant',
        label: 'Style Variant',
        type: 'select',
        options: [
          { value: 'default', label: 'Default' },
          { value: 'bordered', label: 'Bordered' },
          { value: 'striped', label: 'Striped' },
        ],
        defaultValue: 'bordered',
      },
      {
        key: 'style.density',
        label: 'Row Density',
        type: 'select',
        options: [
          { value: 'compact', label: 'Compact' },
          { value: 'comfortable', label: 'Comfortable' },
          { value: 'spacious', label: 'Spacious' },
        ],
        defaultValue: 'comfortable',
      },
      {
        key: 'style.severityColorCoding',
        label: 'Severity Color Coding',
        type: 'boolean',
        defaultValue: true,
      },
    ],
  },

  'kb-article-list': {
    type: 'kb-article-list',
    category: 'data',
    label: 'KB Article List',
    description: 'List of knowledge base articles',
    icon: 'BookOpen',
    supportsChildren: false,
    defaultProps: {
      integration: {
        apiEndpoint: '/api/portal/kb-articles',
        autoRefresh: false,
        refreshInterval: 60000,
      },
      filters: {
        category: '',
        tags: [],
        featuredOnly: false,
        status: 'published',
      },
      display: {
        layout: 'grid',
        columns: 3,
        showSearch: true,
        itemsPerPage: 12,
        sortBy: 'views',
        sortOrder: 'desc',
      },
      content: {
        showExcerpt: true,
        excerptLength: 150,
        showAuthor: true,
        showPublishedDate: true,
        showViewCount: true,
        showRating: true,
        showTags: true,
        showCategory: true,
      },
      search: {
        placeholder: 'Search articles...',
        debounceMs: 300,
        highlightResults: true,
      },
      interaction: {
        clickBehavior: 'navigate',
        navigateUrl: '/kb/:id',
        openInNewTab: false,
      },
      style: {
        cardVariant: 'bordered',
        hoverEffect: 'lift',
        thumbnailAspectRatio: '16/9',
      },
    },
    propertySchema: [
      {
        key: 'integration.apiEndpoint',
        label: 'Data Source',
        type: 'api-endpoint-select',
        defaultValue: '/api/knowledge-base',
        description: 'Select API endpoint to fetch KB articles',
        blockType: 'kb-article-list',
      },
      {
        key: 'filters.category',
        label: 'Filter by Category',
        type: 'kb-category-select',
        defaultValue: '',
        description: 'Show articles from specific category only',
      },
      {
        key: 'display.layout',
        label: 'Layout',
        type: 'select',
        options: [
          { value: 'grid', label: 'Grid' },
          { value: 'list', label: 'List' },
          { value: 'compact', label: 'Compact' },
        ],
        defaultValue: 'grid',
      },
      {
        key: 'display.columns',
        label: 'Columns (Grid Layout)',
        type: 'select',
        options: [
          { value: 2, label: '2 Columns' },
          { value: 3, label: '3 Columns' },
          { value: 4, label: '4 Columns' },
        ],
        defaultValue: 3,
        showIf: { property: 'display.layout', value: 'grid' },
      },
      {
        key: 'filters.category_old',
        label: 'Filter by Category (Text)',
        type: 'string',
        defaultValue: '',
        description: 'Leave empty to show all categories',
      },
      {
        key: 'filters.featuredOnly',
        label: 'Featured Articles Only',
        type: 'boolean',
        defaultValue: false,
      },
      {
        key: 'filters.status',
        label: 'Article Status',
        type: 'select',
        options: [
          { value: 'published', label: 'Published' },
          { value: 'all', label: 'All' },
        ],
        defaultValue: 'published',
      },
      {
        key: 'display.showSearch',
        label: 'Show Search',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'search.placeholder',
        label: 'Search Placeholder',
        type: 'string',
        defaultValue: 'Search articles...',
        showIf: { property: 'display.showSearch', value: true },
      },
      {
        key: 'search.highlightResults',
        label: 'Highlight Search Results',
        type: 'boolean',
        defaultValue: true,
        showIf: { property: 'display.showSearch', value: true },
      },
      {
        key: 'display.itemsPerPage',
        label: 'Items Per Page',
        type: 'number',
        min: 6,
        max: 50,
        step: 6,
        defaultValue: 12,
      },
      {
        key: 'display.sortBy',
        label: 'Sort By',
        type: 'select',
        options: [
          { value: 'views', label: 'Most Viewed' },
          { value: 'rating', label: 'Highest Rated' },
          { value: 'recent', label: 'Most Recent' },
          { value: 'title', label: 'Title' },
          { value: 'helpful', label: 'Most Helpful' },
        ],
        defaultValue: 'views',
      },
      {
        key: 'display.sortOrder',
        label: 'Sort Order',
        type: 'select',
        options: [
          { value: 'asc', label: 'Ascending' },
          { value: 'desc', label: 'Descending' },
        ],
        defaultValue: 'desc',
      },
      {
        key: 'content.showExcerpt',
        label: 'Show Excerpt',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'content.excerptLength',
        label: 'Excerpt Length (characters)',
        type: 'number',
        min: 50,
        max: 500,
        step: 50,
        defaultValue: 150,
        showIf: { property: 'content.showExcerpt', value: true },
      },
      {
        key: 'content.showAuthor',
        label: 'Show Author',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'content.showPublishedDate',
        label: 'Show Published Date',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'content.showViewCount',
        label: 'Show View Count',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'content.showRating',
        label: 'Show Rating',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'content.showTags',
        label: 'Show Tags',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'content.showCategory',
        label: 'Show Category',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'interaction.clickBehavior',
        label: 'Click Behavior',
        type: 'select',
        options: [
          { value: 'navigate', label: 'Navigate to Article' },
          { value: 'modal', label: 'Open in Modal' },
          { value: 'newTab', label: 'Open in New Tab' },
        ],
        defaultValue: 'navigate',
      },
      {
        key: 'interaction.openInNewTab',
        label: 'Open in New Tab',
        type: 'boolean',
        defaultValue: false,
        showIf: { property: 'interaction.clickBehavior', value: 'navigate' },
      },
      {
        key: 'integration.autoRefresh',
        label: 'Auto Refresh',
        type: 'boolean',
        defaultValue: false,
      },
      {
        key: 'integration.refreshInterval',
        label: 'Refresh Interval (ms)',
        type: 'number',
        min: 30000,
        max: 300000,
        step: 30000,
        defaultValue: 60000,
        showIf: { property: 'integration.autoRefresh', value: true },
      },
      {
        key: 'style.cardVariant',
        label: 'Card Style',
        type: 'select',
        options: [
          { value: 'default', label: 'Default' },
          { value: 'bordered', label: 'Bordered' },
          { value: 'elevated', label: 'Elevated' },
        ],
        defaultValue: 'bordered',
      },
      {
        key: 'style.hoverEffect',
        label: 'Hover Effect',
        type: 'select',
        options: [
          { value: 'none', label: 'None' },
          { value: 'lift', label: 'Lift' },
          { value: 'scale', label: 'Scale' },
          { value: 'glow', label: 'Glow' },
        ],
        defaultValue: 'lift',
      },
      {
        key: 'style.thumbnailAspectRatio',
        label: 'Thumbnail Aspect Ratio',
        type: 'select',
        options: [
          { value: '16/9', label: '16:9 (Widescreen)' },
          { value: '4/3', label: '4:3 (Standard)' },
          { value: '1/1', label: '1:1 (Square)' },
          { value: '3/2', label: '3:2 (Classic)' },
        ],
        defaultValue: '16/9',
      },
    ],
  },

  'service-catalog': {
    type: 'service-catalog',
    category: 'widget',
    label: 'Service Catalog',
    description: 'Service catalog grid',
    icon: 'ShoppingCart',
    supportsChildren: false,
    defaultProps: {
      integration: {
        apiEndpoint: '/api/portal/service-catalog',
        category: '',
        featured: false,
      },
      display: {
        layout: 'grid',
        columns: 3,
        showSearch: true,
        showCategoryFilter: true,
        showPricing: true,
        showDescription: true,
        sortBy: 'name',
        sortOrder: 'asc',
      },
      button: {
        text: 'Request Service',
        variant: 'primary',
        action: 'modal',
      },
      search: {
        placeholder: 'Search services...',
        debounceMs: 300,
      },
      pagination: {
        enabled: true,
        itemsPerPage: 12,
      },
      style: {
        cardVariant: 'elevated',
        hoverEffect: 'lift',
      },
    },
    propertySchema: [
      {
        key: 'integration.apiEndpoint',
        label: 'Data Source',
        type: 'api-endpoint-select',
        defaultValue: '/api/service-catalog',
        description: 'Select API endpoint to fetch service catalog items',
        blockType: 'service-catalog',
      },
      {
        key: 'display.layout',
        label: 'Layout',
        type: 'select',
        options: [
          { value: 'grid', label: 'Grid' },
          { value: 'list', label: 'List' },
          { value: 'compact', label: 'Compact' },
        ],
        defaultValue: 'grid',
      },
      {
        key: 'display.columns',
        label: 'Columns (Grid Layout)',
        type: 'select',
        options: [
          { value: 2, label: '2 Columns' },
          { value: 3, label: '3 Columns' },
          { value: 4, label: '4 Columns' },
        ],
        defaultValue: 3,
        showIf: { property: 'display.layout', value: 'grid' },
      },
      {
        key: 'integration.category',
        label: 'Filter by Category',
        type: 'string',
        defaultValue: '',
        description: 'Leave empty to show all categories',
      },
      {
        key: 'integration.featured',
        label: 'Featured Only',
        type: 'boolean',
        defaultValue: false,
      },
      {
        key: 'display.showSearch',
        label: 'Show Search',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'search.placeholder',
        label: 'Search Placeholder',
        type: 'string',
        defaultValue: 'Search services...',
        showIf: { property: 'display.showSearch', value: true },
      },
      {
        key: 'display.showCategoryFilter',
        label: 'Show Category Filter',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'display.showPricing',
        label: 'Show Pricing',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'display.showDescription',
        label: 'Show Description',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'display.sortBy',
        label: 'Sort By',
        type: 'select',
        options: [
          { value: 'name', label: 'Name' },
          { value: 'category', label: 'Category' },
          { value: 'price', label: 'Price' },
          { value: 'popular', label: 'Popularity' },
        ],
        defaultValue: 'name',
      },
      {
        key: 'display.sortOrder',
        label: 'Sort Order',
        type: 'select',
        options: [
          { value: 'asc', label: 'Ascending' },
          { value: 'desc', label: 'Descending' },
        ],
        defaultValue: 'asc',
      },
      {
        key: 'button.text',
        label: 'Request Button Text',
        type: 'string',
        defaultValue: 'Request Service',
      },
      {
        key: 'button.variant',
        label: 'Button Variant',
        type: 'select',
        options: [
          { value: 'primary', label: 'Primary' },
          { value: 'default', label: 'Default' },
          { value: 'outline', label: 'Outline' },
        ],
        defaultValue: 'primary',
      },
      {
        key: 'button.action',
        label: 'Button Action',
        type: 'select',
        options: [
          { value: 'modal', label: 'Open Modal' },
          { value: 'navigate', label: 'Navigate to Form' },
        ],
        defaultValue: 'modal',
      },
      {
        key: 'pagination.enabled',
        label: 'Enable Pagination',
        type: 'boolean',
        defaultValue: true,
      },
      {
        key: 'pagination.itemsPerPage',
        label: 'Items Per Page',
        type: 'number',
        min: 6,
        max: 50,
        step: 6,
        defaultValue: 12,
        showIf: { property: 'pagination.enabled', value: true },
      },
      {
        key: 'style.cardVariant',
        label: 'Card Style',
        type: 'select',
        options: [
          { value: 'default', label: 'Default' },
          { value: 'bordered', label: 'Bordered' },
          { value: 'elevated', label: 'Elevated' },
        ],
        defaultValue: 'elevated',
      },
      {
        key: 'style.hoverEffect',
        label: 'Hover Effect',
        type: 'select',
        options: [
          { value: 'none', label: 'None' },
          { value: 'lift', label: 'Lift' },
          { value: 'scale', label: 'Scale' },
        ],
        defaultValue: 'lift',
      },
    ],
  },
}

/**
 * Helper: Get block definition
 */
export function getBlockDefinition(type: PortalBlockType): BlockDefinition | undefined {
  return BLOCK_DEFINITIONS[type]
}

/**
 * Helper: Get blocks by category
 */
export function getBlocksByCategory(categoryId: string): BlockDefinition[] {
  return Object.values(BLOCK_DEFINITIONS).filter((block) => block.category === categoryId)
}

/**
 * Helper: Create default block instance
 */
export function createBlockInstance(type: PortalBlockType): any {
  const definition = getBlockDefinition(type)
  if (!definition) return null

  return {
    id: `block_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
    type,
    props: definition.defaultProps,
    children: definition.supportsChildren ? [] : undefined,
    order: 0,
  }
}
